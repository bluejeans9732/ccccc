{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _container = _interopRequireDefault(require(\"./container\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\n/**\n * Represents an at-rule.\n *\n * If it’s followed in the CSS by a {} block, this node will have\n * a nodes property representing its children.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('@charset \"UTF-8\"; @media print {}')\n *\n * const charset = root.first\n * charset.type  //=> 'atrule'\n * charset.nodes //=> undefined\n *\n * const media = root.last\n * media.nodes   //=> []\n */\nvar AtRule = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(AtRule, _Container);\n  function AtRule(defaults) {\n    var _this;\n    _this = _Container.call(this, defaults) || this;\n    _this.type = 'atrule';\n    return _this;\n  }\n  var _proto = AtRule.prototype;\n  _proto.append = function append() {\n    var _Container$prototype$;\n    if (!this.nodes) this.nodes = [];\n    for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {\n      children[_key] = arguments[_key];\n    }\n    return (_Container$prototype$ = _Container.prototype.append).call.apply(_Container$prototype$, [this].concat(children));\n  };\n  _proto.prepend = function prepend() {\n    var _Container$prototype$2;\n    if (!this.nodes) this.nodes = [];\n    for (var _len2 = arguments.length, children = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      children[_key2] = arguments[_key2];\n    }\n    return (_Container$prototype$2 = _Container.prototype.prepend).call.apply(_Container$prototype$2, [this].concat(children));\n  }\n  /**\n   * @memberof AtRule#\n   * @member {string} name The at-rule’s name immediately follows the `@`.\n   *\n   * @example\n   * const root  = postcss.parse('@media print {}')\n   * media.name //=> 'media'\n   * const media = root.first\n   */\n\n  /**\n   * @memberof AtRule#\n   * @member {string} params The at-rule’s parameters, the values\n   *                         that follow the at-rule’s name but precede\n   *                         any {} block.\n   *\n   * @example\n   * const root  = postcss.parse('@media print, screen {}')\n   * const media = root.first\n   * media.params //=> 'print, screen'\n   */\n\n  /**\n   * @memberof AtRule#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                        node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node. It also stores `*`\n   *   and `_` symbols before the declaration (IE hack).\n   * * `after`: the space symbols after the last child of the node\n   *   to the end of the node.\n   * * `between`: the symbols between the property and value\n   *   for declarations, selector and `{` for rules, or last parameter\n   *   and `{` for at-rules.\n   * * `semicolon`: contains true if the last child has\n   *   an (optional) semicolon.\n   * * `afterName`: the space between the at-rule name and its parameters.\n   *\n   * PostCSS cleans at-rule parameters from comments and extra spaces,\n   * but it stores origin content in raws properties.\n   * As such, if you don’t change a declaration’s value,\n   * PostCSS will use the raw value with comments.\n   *\n   * @example\n   * const root = postcss.parse('  @media\\nprint {\\n}')\n   * root.first.first.raws //=> { before: '  ',\n   *                       //     between: ' ',\n   *                       //     afterName: '\\n',\n   *                       //     after: '\\n' }\n   */;\n\n  return AtRule;\n}(_container.default);\nvar _default = AtRule;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_container","_interopRequireDefault","require","AtRule","defaults","_this","_Container","call","type","append","_Container$prototype$","nodes","_len","arguments","length","children","Array","_key","prototype","apply","concat","prepend","_Container$prototype$2","_len2","_key2","default"],"sources":["C:\\Users\\dyd97\\OneDrive\\바탕 화면\\test-main\\node_modules\\postcss\\lib\\at-rule.es6"],"sourcesContent":["import Container from './container'\n\n/**\n * Represents an at-rule.\n *\n * If it’s followed in the CSS by a {} block, this node will have\n * a nodes property representing its children.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('@charset \"UTF-8\"; @media print {}')\n *\n * const charset = root.first\n * charset.type  //=> 'atrule'\n * charset.nodes //=> undefined\n *\n * const media = root.last\n * media.nodes   //=> []\n */\nclass AtRule extends Container {\n  constructor (defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append (...children) {\n    if (!this.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend (...children) {\n    if (!this.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n\n  /**\n   * @memberof AtRule#\n   * @member {string} name The at-rule’s name immediately follows the `@`.\n   *\n   * @example\n   * const root  = postcss.parse('@media print {}')\n   * media.name //=> 'media'\n   * const media = root.first\n   */\n\n  /**\n   * @memberof AtRule#\n   * @member {string} params The at-rule’s parameters, the values\n   *                         that follow the at-rule’s name but precede\n   *                         any {} block.\n   *\n   * @example\n   * const root  = postcss.parse('@media print, screen {}')\n   * const media = root.first\n   * media.params //=> 'print, screen'\n   */\n\n  /**\n   * @memberof AtRule#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                        node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node. It also stores `*`\n   *   and `_` symbols before the declaration (IE hack).\n   * * `after`: the space symbols after the last child of the node\n   *   to the end of the node.\n   * * `between`: the symbols between the property and value\n   *   for declarations, selector and `{` for rules, or last parameter\n   *   and `{` for at-rules.\n   * * `semicolon`: contains true if the last child has\n   *   an (optional) semicolon.\n   * * `afterName`: the space between the at-rule name and its parameters.\n   *\n   * PostCSS cleans at-rule parameters from comments and extra spaces,\n   * but it stores origin content in raws properties.\n   * As such, if you don’t change a declaration’s value,\n   * PostCSS will use the raw value with comments.\n   *\n   * @example\n   * const root = postcss.parse('  @media\\nprint {\\n}')\n   * root.first.first.raws //=> { before: '  ',\n   *                       //     between: ' ',\n   *                       //     afterName: '\\n',\n   *                       //     after: '\\n' }\n   */\n}\n\nexport default AtRule\n"],"mappings":";;;;AAAA,IAAAA,UAAA,GAAAC,sBAAA,CAAAC,OAAA;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;IAkBMC,M;;EACJ,SAAAA,OAAaC,QAAb,EAAuB;IAAA,IAAAC,KAAA;IACrBA,KAAA,GAAAC,UAAA,CAAAC,IAAA,OAAMH,QAAN;IACAC,KAAA,CAAKG,IAAL,GAAY,QAAZ;IAFqB,OAAAH,KAAA;EAGtB;;SAEDI,M,GAAA,SAAAA,OAAA,EAAqB;IAAA,IAAAC,qBAAA;IACnB,IAAI,CAAC,KAAKC,KAAV,EAAiB,KAAKA,KAAL,GAAa,EAAb;IADE,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAVC,QAAU,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAVF,QAAU,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IAEnB,QAAAP,qBAAA,GAAAJ,UAAA,CAAAY,SAAA,CAAaT,MAAb,EAAAF,IAAA,CAAAY,KAAA,CAAAT,qBAAA,SAAAU,MAAA,CAAuBL,QAAvB;EACD,C;SAEDM,O,GAAA,SAAAA,QAAA,EAAsB;IAAA,IAAAC,sBAAA;IACpB,IAAI,CAAC,KAAKX,KAAV,EAAiB,KAAKA,KAAL,GAAa,EAAb;IADG,SAAAY,KAAA,GAAAV,SAAA,CAAAC,MAAA,EAAVC,QAAU,OAAAC,KAAA,CAAAO,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAVT,QAAU,CAAAS,KAAA,IAAAX,SAAA,CAAAW,KAAA;IAAA;IAEpB,QAAAF,sBAAA,GAAAhB,UAAA,CAAAY,SAAA,CAAaG,OAAb,EAAAd,IAAA,CAAAY,KAAA,CAAAG,sBAAA,SAAAF,MAAA,CAAwBL,QAAxB;EACD;EAED;;;;;;;;;;EAUA;;;;;;;;;;;;EAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAAA;;;EAtCmBf,UAAA,CAAAyB,O;eAuENtB,M"},"metadata":{},"sourceType":"script","externalDependencies":[]}