{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _declaration = _interopRequireDefault(require(\"./declaration\"));\nvar _comment = _interopRequireDefault(require(\"./comment\"));\nvar _node = _interopRequireDefault(require(\"./node\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nfunction cleanSource(nodes) {\n  return nodes.map(function (i) {\n    if (i.nodes) i.nodes = cleanSource(i.nodes);\n    delete i.source;\n    return i;\n  });\n}\n/**\n * The {@link Root}, {@link AtRule}, and {@link Rule} container nodes\n * inherit some common methods to help work with their children.\n *\n * Note that all containers can store any content. If you write a rule inside\n * a rule, PostCSS will parse it.\n *\n * @extends Node\n * @abstract\n */\n\nvar Container = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Container, _Node);\n  function Container() {\n    return _Node.apply(this, arguments) || this;\n  }\n  var _proto = Container.prototype;\n  _proto.push = function push(child) {\n    child.parent = this;\n    this.nodes.push(child);\n    return this;\n  }\n  /**\n   * Iterates through the container’s immediate children,\n   * calling `callback` for each child.\n   *\n   * Returning `false` in the callback will break iteration.\n   *\n   * This method only iterates through the container’s immediate children.\n   * If you need to recursively iterate through all the container’s descendant\n   * nodes, use {@link Container#walk}.\n   *\n   * Unlike the for `{}`-cycle or `Array#forEach` this iterator is safe\n   * if you are mutating the array of child nodes during iteration.\n   * PostCSS will adjust the current index to match the mutations.\n   *\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black; z-index: 1 }')\n   * const rule = root.first\n   *\n   * for (const decl of rule.nodes) {\n   *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })\n   *   // Cycle will be infinite, because cloneBefore moves the current node\n   *   // to the next index\n   * }\n   *\n   * rule.each(decl => {\n   *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })\n   *   // Will be executed only for color and z-index\n   * })\n   */;\n\n  _proto.each = function each(callback) {\n    if (!this.lastEach) this.lastEach = 0;\n    if (!this.indexes) this.indexes = {};\n    this.lastEach += 1;\n    var id = this.lastEach;\n    this.indexes[id] = 0;\n    if (!this.nodes) return undefined;\n    var index, result;\n    while (this.indexes[id] < this.nodes.length) {\n      index = this.indexes[id];\n      result = callback(this.nodes[index], index);\n      if (result === false) break;\n      this.indexes[id] += 1;\n    }\n    delete this.indexes[id];\n    return result;\n  }\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each node.\n   *\n   * Like container.each(), this method is safe to use\n   * if you are mutating arrays during iteration.\n   *\n   * If you only need to iterate through the container’s immediate children,\n   * use {@link Container#each}.\n   *\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walk(node => {\n   *   // Traverses all descendant nodes.\n   * })\n   */;\n\n  _proto.walk = function walk(callback) {\n    return this.each(function (child, i) {\n      var result;\n      try {\n        result = callback(child, i);\n      } catch (e) {\n        e.postcssNode = child;\n        if (e.stack && child.source && /\\n\\s{4}at /.test(e.stack)) {\n          var s = child.source;\n          e.stack = e.stack.replace(/\\n\\s{4}at /, \"$&\" + s.input.from + \":\" + s.start.line + \":\" + s.start.column + \"$&\");\n        }\n        throw e;\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback);\n      }\n      return result;\n    });\n  }\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each declaration node.\n   *\n   * If you pass a filter, iteration will only happen over declarations\n   * with matching properties.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {string|RegExp} [prop]   String or regular expression\n   *                                 to filter declarations by property name.\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walkDecls(decl => {\n   *   checkPropertySupport(decl.prop)\n   * })\n   *\n   * root.walkDecls('border-radius', decl => {\n   *   decl.remove()\n   * })\n   *\n   * root.walkDecls(/^background/, decl => {\n   *   decl.value = takeFirstColorFromGradient(decl.value)\n   * })\n   */;\n\n  _proto.walkDecls = function walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop;\n      return this.walk(function (child, i) {\n        if (child.type === 'decl') {\n          return callback(child, i);\n        }\n      });\n    }\n    if (prop instanceof RegExp) {\n      return this.walk(function (child, i) {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i);\n        }\n      });\n    }\n    return this.walk(function (child, i) {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i);\n      }\n    });\n  }\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each rule node.\n   *\n   * If you pass a filter, iteration will only happen over rules\n   * with matching selectors.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {string|RegExp} [selector] String or regular expression\n   *                                   to filter rules by selector.\n   * @param {childIterator} callback   Iterator receives each node and index.\n   *\n   * @return {false|undefined} returns `false` if iteration was broke.\n   *\n   * @example\n   * const selectors = []\n   * root.walkRules(rule => {\n   *   selectors.push(rule.selector)\n   * })\n   * console.log(`Your CSS uses ${ selectors.length } selectors`)\n   */;\n\n  _proto.walkRules = function walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector;\n      return this.walk(function (child, i) {\n        if (child.type === 'rule') {\n          return callback(child, i);\n        }\n      });\n    }\n    if (selector instanceof RegExp) {\n      return this.walk(function (child, i) {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i);\n        }\n      });\n    }\n    return this.walk(function (child, i) {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i);\n      }\n    });\n  }\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each at-rule node.\n   *\n   * If you pass a filter, iteration will only happen over at-rules\n   * that have matching names.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {string|RegExp} [name]   String or regular expression\n   *                                 to filter at-rules by name.\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walkAtRules(rule => {\n   *   if (isOld(rule.name)) rule.remove()\n   * })\n   *\n   * let first = false\n   * root.walkAtRules('charset', rule => {\n   *   if (!first) {\n   *     first = true\n   *   } else {\n   *     rule.remove()\n   *   }\n   * })\n   */;\n\n  _proto.walkAtRules = function walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name;\n      return this.walk(function (child, i) {\n        if (child.type === 'atrule') {\n          return callback(child, i);\n        }\n      });\n    }\n    if (name instanceof RegExp) {\n      return this.walk(function (child, i) {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i);\n        }\n      });\n    }\n    return this.walk(function (child, i) {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i);\n      }\n    });\n  }\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each comment node.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walkComments(comment => {\n   *   comment.remove()\n   * })\n   */;\n\n  _proto.walkComments = function walkComments(callback) {\n    return this.walk(function (child, i) {\n      if (child.type === 'comment') {\n        return callback(child, i);\n      }\n    });\n  }\n  /**\n   * Inserts new nodes to the end of the container.\n   *\n   * @param {...(Node|object|string|Node[])} children New nodes.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * const decl1 = postcss.decl({ prop: 'color', value: 'black' })\n   * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' })\n   * rule.append(decl1, decl2)\n   *\n   * root.append({ name: 'charset', params: '\"UTF-8\"' })  // at-rule\n   * root.append({ selector: 'a' })                       // rule\n   * rule.append({ prop: 'color', value: 'black' })       // declaration\n   * rule.append({ text: 'Comment' })                     // comment\n   *\n   * root.append('a {}')\n   * root.first.append('color: black; z-index: 1')\n   */;\n\n  _proto.append = function append() {\n    for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {\n      children[_key] = arguments[_key];\n    }\n    for (var _i = 0, _children = children; _i < _children.length; _i++) {\n      var child = _children[_i];\n      var nodes = this.normalize(child, this.last);\n      for (var _iterator = _createForOfIteratorHelperLoose(nodes), _step; !(_step = _iterator()).done;) {\n        var node = _step.value;\n        this.nodes.push(node);\n      }\n    }\n    return this;\n  }\n  /**\n   * Inserts new nodes to the start of the container.\n   *\n   * @param {...(Node|object|string|Node[])} children New nodes.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * const decl1 = postcss.decl({ prop: 'color', value: 'black' })\n   * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' })\n   * rule.prepend(decl1, decl2)\n   *\n   * root.append({ name: 'charset', params: '\"UTF-8\"' })  // at-rule\n   * root.append({ selector: 'a' })                       // rule\n   * rule.append({ prop: 'color', value: 'black' })       // declaration\n   * rule.append({ text: 'Comment' })                     // comment\n   *\n   * root.append('a {}')\n   * root.first.append('color: black; z-index: 1')\n   */;\n\n  _proto.prepend = function prepend() {\n    for (var _len2 = arguments.length, children = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      children[_key2] = arguments[_key2];\n    }\n    children = children.reverse();\n    for (var _iterator2 = _createForOfIteratorHelperLoose(children), _step2; !(_step2 = _iterator2()).done;) {\n      var child = _step2.value;\n      var nodes = this.normalize(child, this.first, 'prepend').reverse();\n      for (var _iterator3 = _createForOfIteratorHelperLoose(nodes), _step3; !(_step3 = _iterator3()).done;) {\n        var node = _step3.value;\n        this.nodes.unshift(node);\n      }\n      for (var id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length;\n      }\n    }\n    return this;\n  };\n  _proto.cleanRaws = function cleanRaws(keepBetween) {\n    _Node.prototype.cleanRaws.call(this, keepBetween);\n    if (this.nodes) {\n      for (var _iterator4 = _createForOfIteratorHelperLoose(this.nodes), _step4; !(_step4 = _iterator4()).done;) {\n        var node = _step4.value;\n        node.cleanRaws(keepBetween);\n      }\n    }\n  }\n  /**\n   * Insert new node before old node within the container.\n   *\n   * @param {Node|number} exist             Child or child’s index.\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * rule.insertBefore(decl, decl.clone({ prop: '-webkit-' + decl.prop }))\n   */;\n\n  _proto.insertBefore = function insertBefore(exist, add) {\n    exist = this.index(exist);\n    var type = exist === 0 ? 'prepend' : false;\n    var nodes = this.normalize(add, this.nodes[exist], type).reverse();\n    for (var _iterator5 = _createForOfIteratorHelperLoose(nodes), _step5; !(_step5 = _iterator5()).done;) {\n      var node = _step5.value;\n      this.nodes.splice(exist, 0, node);\n    }\n    var index;\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n      if (exist <= index) {\n        this.indexes[id] = index + nodes.length;\n      }\n    }\n    return this;\n  }\n  /**\n   * Insert new node after old node within the container.\n   *\n   * @param {Node|number} exist             Child or child’s index.\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   */;\n\n  _proto.insertAfter = function insertAfter(exist, add) {\n    exist = this.index(exist);\n    var nodes = this.normalize(add, this.nodes[exist]).reverse();\n    for (var _iterator6 = _createForOfIteratorHelperLoose(nodes), _step6; !(_step6 = _iterator6()).done;) {\n      var node = _step6.value;\n      this.nodes.splice(exist + 1, 0, node);\n    }\n    var index;\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n      if (exist < index) {\n        this.indexes[id] = index + nodes.length;\n      }\n    }\n    return this;\n  }\n  /**\n   * Removes node from the container and cleans the parent properties\n   * from the node and its children.\n   *\n   * @param {Node|number} child Child or child’s index.\n   *\n   * @return {Node} This node for methods chain\n   *\n   * @example\n   * rule.nodes.length  //=> 5\n   * rule.removeChild(decl)\n   * rule.nodes.length  //=> 4\n   * decl.parent        //=> undefined\n   */;\n\n  _proto.removeChild = function removeChild(child) {\n    child = this.index(child);\n    this.nodes[child].parent = undefined;\n    this.nodes.splice(child, 1);\n    var index;\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n      if (index >= child) {\n        this.indexes[id] = index - 1;\n      }\n    }\n    return this;\n  }\n  /**\n   * Removes all children from the container\n   * and cleans their parent properties.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * rule.removeAll()\n   * rule.nodes.length //=> 0\n   */;\n\n  _proto.removeAll = function removeAll() {\n    for (var _iterator7 = _createForOfIteratorHelperLoose(this.nodes), _step7; !(_step7 = _iterator7()).done;) {\n      var node = _step7.value;\n      node.parent = undefined;\n    }\n    this.nodes = [];\n    return this;\n  }\n  /**\n   * Passes all declaration values within the container that match pattern\n   * through callback, replacing those values with the returned result\n   * of callback.\n   *\n   * This method is useful if you are using a custom unit or function\n   * and need to iterate through all values.\n   *\n   * @param {string|RegExp} pattern      Replace pattern.\n   * @param {object} opts                Options to speed up the search.\n   * @param {string|string[]} opts.props An array of property names.\n   * @param {string} opts.fast           String that’s used to narrow down\n   *                                     values and speed up the regexp search.\n   * @param {function|string} callback   String to replace pattern or callback\n   *                                     that returns a new value. The callback\n   *                                     will receive the same arguments\n   *                                     as those passed to a function parameter\n   *                                     of `String#replace`.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * root.replaceValues(/\\d+rem/, { fast: 'rem' }, string => {\n   *   return 15 * parseInt(string) + 'px'\n   * })\n   */;\n\n  _proto.replaceValues = function replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts;\n      opts = {};\n    }\n    this.walkDecls(function (decl) {\n      if (opts.props && opts.props.indexOf(decl.prop) === -1) return;\n      if (opts.fast && decl.value.indexOf(opts.fast) === -1) return;\n      decl.value = decl.value.replace(pattern, callback);\n    });\n    return this;\n  }\n  /**\n   * Returns `true` if callback returns `true`\n   * for all of the container’s children.\n   *\n   * @param {childCondition} condition Iterator returns true or false.\n   *\n   * @return {boolean} Is every child pass condition.\n   *\n   * @example\n   * const noPrefixes = rule.every(i => i.prop[0] !== '-')\n   */;\n\n  _proto.every = function every(condition) {\n    return this.nodes.every(condition);\n  }\n  /**\n   * Returns `true` if callback returns `true` for (at least) one\n   * of the container’s children.\n   *\n   * @param {childCondition} condition Iterator returns true or false.\n   *\n   * @return {boolean} Is some child pass condition.\n   *\n   * @example\n   * const hasPrefix = rule.some(i => i.prop[0] === '-')\n   */;\n\n  _proto.some = function some(condition) {\n    return this.nodes.some(condition);\n  }\n  /**\n   * Returns a `child`’s index within the {@link Container#nodes} array.\n   *\n   * @param {Node} child Child of the current container.\n   *\n   * @return {number} Child index.\n   *\n   * @example\n   * rule.index( rule.nodes[2] ) //=> 2\n   */;\n\n  _proto.index = function index(child) {\n    if (typeof child === 'number') {\n      return child;\n    }\n    return this.nodes.indexOf(child);\n  }\n  /**\n   * The container’s first child.\n   *\n   * @type {Node}\n   *\n   * @example\n   * rule.first === rules.nodes[0]\n   */;\n\n  _proto.normalize = function normalize(nodes, sample) {\n    var _this = this;\n    if (typeof nodes === 'string') {\n      var parse = require('./parse');\n      nodes = cleanSource(parse(nodes).nodes);\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0);\n      for (var _iterator8 = _createForOfIteratorHelperLoose(nodes), _step8; !(_step8 = _iterator8()).done;) {\n        var i = _step8.value;\n        if (i.parent) i.parent.removeChild(i, 'ignore');\n      }\n    } else if (nodes.type === 'root') {\n      nodes = nodes.nodes.slice(0);\n      for (var _iterator9 = _createForOfIteratorHelperLoose(nodes), _step9; !(_step9 = _iterator9()).done;) {\n        var _i2 = _step9.value;\n        if (_i2.parent) _i2.parent.removeChild(_i2, 'ignore');\n      }\n    } else if (nodes.type) {\n      nodes = [nodes];\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation');\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value);\n      }\n      nodes = [new _declaration.default(nodes)];\n    } else if (nodes.selector) {\n      var Rule = require('./rule');\n      nodes = [new Rule(nodes)];\n    } else if (nodes.name) {\n      var AtRule = require('./at-rule');\n      nodes = [new AtRule(nodes)];\n    } else if (nodes.text) {\n      nodes = [new _comment.default(nodes)];\n    } else {\n      throw new Error('Unknown node type in node creation');\n    }\n    var processed = nodes.map(function (i) {\n      if (i.parent) i.parent.removeChild(i);\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/[^\\s]/g, '');\n        }\n      }\n      i.parent = _this;\n      return i;\n    });\n    return processed;\n  }\n  /**\n   * @memberof Container#\n   * @member {Node[]} nodes An array containing the container’s children.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black }')\n   * root.nodes.length           //=> 1\n   * root.nodes[0].selector      //=> 'a'\n   * root.nodes[0].nodes[0].prop //=> 'color'\n   */;\n\n  _createClass(Container, [{\n    key: \"first\",\n    get: function get() {\n      if (!this.nodes) return undefined;\n      return this.nodes[0];\n    }\n    /**\n     * The container’s last child.\n     *\n     * @type {Node}\n     *\n     * @example\n     * rule.last === rule.nodes[rule.nodes.length - 1]\n     */\n  }, {\n    key: \"last\",\n    get: function get() {\n      if (!this.nodes) return undefined;\n      return this.nodes[this.nodes.length - 1];\n    }\n  }]);\n  return Container;\n}(_node.default);\nvar _default = Container;\n/**\n * @callback childCondition\n * @param {Node} node    Container child.\n * @param {number} index Child index.\n * @param {Node[]} nodes All container children.\n * @return {boolean}\n */\n\n/**\n * @callback childIterator\n * @param {Node} node    Container child.\n * @param {number} index Child index.\n * @return {false|undefined} Returning `false` will break iteration.\n */\n\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_declaration","_interopRequireDefault","require","_comment","_node","cleanSource","nodes","map","i","source","Container","push","child","parent","each","callback","lastEach","indexes","id","undefined","index","result","length","walk","e","postcssNode","stack","test","s","replace","input","from","start","line","column","walkDecls","prop","type","RegExp","walkRules","selector","walkAtRules","name","walkComments","append","_len","arguments","children","Array","_key","_i","_children","normalize","last","_iterator","_createForOfIteratorHelperLoose","_step","done","node","value","prepend","_len2","_key2","reverse","_iterator2","_step2","first","_iterator3","_step3","unshift","cleanRaws","keepBetween","_Node","prototype","call","_iterator4","_step4","insertBefore","exist","add","_iterator5","_step5","splice","insertAfter","_iterator6","_step6","removeChild","removeAll","_iterator7","_step7","replaceValues","pattern","opts","decl","props","indexOf","fast","every","condition","some","sample","_this","parse","isArray","slice","_iterator8","_step8","_iterator9","_step9","_i2","Error","String","default","Rule","AtRule","text","processed","raws","before"],"sources":["C:\\Users\\dyd97\\OneDrive\\바탕 화면\\test-main\\node_modules\\postcss\\lib\\container.es6"],"sourcesContent":["import Declaration from './declaration'\nimport Comment from './comment'\nimport Node from './node'\n\nfunction cleanSource (nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\n/**\n * The {@link Root}, {@link AtRule}, and {@link Rule} container nodes\n * inherit some common methods to help work with their children.\n *\n * Note that all containers can store any content. If you write a rule inside\n * a rule, PostCSS will parse it.\n *\n * @extends Node\n * @abstract\n */\nclass Container extends Node {\n  push (child) {\n    child.parent = this\n    this.nodes.push(child)\n    return this\n  }\n\n  /**\n   * Iterates through the container’s immediate children,\n   * calling `callback` for each child.\n   *\n   * Returning `false` in the callback will break iteration.\n   *\n   * This method only iterates through the container’s immediate children.\n   * If you need to recursively iterate through all the container’s descendant\n   * nodes, use {@link Container#walk}.\n   *\n   * Unlike the for `{}`-cycle or `Array#forEach` this iterator is safe\n   * if you are mutating the array of child nodes during iteration.\n   * PostCSS will adjust the current index to match the mutations.\n   *\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black; z-index: 1 }')\n   * const rule = root.first\n   *\n   * for (const decl of rule.nodes) {\n   *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })\n   *   // Cycle will be infinite, because cloneBefore moves the current node\n   *   // to the next index\n   * }\n   *\n   * rule.each(decl => {\n   *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })\n   *   // Will be executed only for color and z-index\n   * })\n   */\n  each (callback) {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = { }\n\n    this.lastEach += 1\n    let id = this.lastEach\n    this.indexes[id] = 0\n\n    if (!this.nodes) return undefined\n\n    let index, result\n    while (this.indexes[id] < this.nodes.length) {\n      index = this.indexes[id]\n      result = callback(this.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[id] += 1\n    }\n\n    delete this.indexes[id]\n\n    return result\n  }\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each node.\n   *\n   * Like container.each(), this method is safe to use\n   * if you are mutating arrays during iteration.\n   *\n   * If you only need to iterate through the container’s immediate children,\n   * use {@link Container#each}.\n   *\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walk(node => {\n   *   // Traverses all descendant nodes.\n   * })\n   */\n  walk (callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        e.postcssNode = child\n        if (e.stack && child.source && /\\n\\s{4}at /.test(e.stack)) {\n          let s = child.source\n          e.stack = e.stack.replace(/\\n\\s{4}at /,\n            `$&${ s.input.from }:${ s.start.line }:${ s.start.column }$&`)\n        }\n        throw e\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n      return result\n    })\n  }\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each declaration node.\n   *\n   * If you pass a filter, iteration will only happen over declarations\n   * with matching properties.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {string|RegExp} [prop]   String or regular expression\n   *                                 to filter declarations by property name.\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walkDecls(decl => {\n   *   checkPropertySupport(decl.prop)\n   * })\n   *\n   * root.walkDecls('border-radius', decl => {\n   *   decl.remove()\n   * })\n   *\n   * root.walkDecls(/^background/, decl => {\n   *   decl.value = takeFirstColorFromGradient(decl.value)\n   * })\n   */\n  walkDecls (prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each rule node.\n   *\n   * If you pass a filter, iteration will only happen over rules\n   * with matching selectors.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {string|RegExp} [selector] String or regular expression\n   *                                   to filter rules by selector.\n   * @param {childIterator} callback   Iterator receives each node and index.\n   *\n   * @return {false|undefined} returns `false` if iteration was broke.\n   *\n   * @example\n   * const selectors = []\n   * root.walkRules(rule => {\n   *   selectors.push(rule.selector)\n   * })\n   * console.log(`Your CSS uses ${ selectors.length } selectors`)\n   */\n  walkRules (selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each at-rule node.\n   *\n   * If you pass a filter, iteration will only happen over at-rules\n   * that have matching names.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {string|RegExp} [name]   String or regular expression\n   *                                 to filter at-rules by name.\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walkAtRules(rule => {\n   *   if (isOld(rule.name)) rule.remove()\n   * })\n   *\n   * let first = false\n   * root.walkAtRules('charset', rule => {\n   *   if (!first) {\n   *     first = true\n   *   } else {\n   *     rule.remove()\n   *   }\n   * })\n   */\n  walkAtRules (name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each comment node.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walkComments(comment => {\n   *   comment.remove()\n   * })\n   */\n  walkComments (callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  /**\n   * Inserts new nodes to the end of the container.\n   *\n   * @param {...(Node|object|string|Node[])} children New nodes.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * const decl1 = postcss.decl({ prop: 'color', value: 'black' })\n   * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' })\n   * rule.append(decl1, decl2)\n   *\n   * root.append({ name: 'charset', params: '\"UTF-8\"' })  // at-rule\n   * root.append({ selector: 'a' })                       // rule\n   * rule.append({ prop: 'color', value: 'black' })       // declaration\n   * rule.append({ text: 'Comment' })                     // comment\n   *\n   * root.append('a {}')\n   * root.first.append('color: black; z-index: 1')\n   */\n  append (...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.nodes.push(node)\n    }\n    return this\n  }\n\n  /**\n   * Inserts new nodes to the start of the container.\n   *\n   * @param {...(Node|object|string|Node[])} children New nodes.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * const decl1 = postcss.decl({ prop: 'color', value: 'black' })\n   * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' })\n   * rule.prepend(decl1, decl2)\n   *\n   * root.append({ name: 'charset', params: '\"UTF-8\"' })  // at-rule\n   * root.append({ selector: 'a' })                       // rule\n   * rule.append({ prop: 'color', value: 'black' })       // declaration\n   * rule.append({ text: 'Comment' })                     // comment\n   *\n   * root.append('a {}')\n   * root.first.append('color: black; z-index: 1')\n   */\n  prepend (...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n    return this\n  }\n\n  cleanRaws (keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  /**\n   * Insert new node before old node within the container.\n   *\n   * @param {Node|number} exist             Child or child’s index.\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * rule.insertBefore(decl, decl.clone({ prop: '-webkit-' + decl.prop }))\n   */\n  insertBefore (exist, add) {\n    exist = this.index(exist)\n\n    let type = exist === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.nodes[exist], type).reverse()\n    for (let node of nodes) this.nodes.splice(exist, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Insert new node after old node within the container.\n   *\n   * @param {Node|number} exist             Child or child’s index.\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   */\n  insertAfter (exist, add) {\n    exist = this.index(exist)\n\n    let nodes = this.normalize(add, this.nodes[exist]).reverse()\n    for (let node of nodes) this.nodes.splice(exist + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Removes node from the container and cleans the parent properties\n   * from the node and its children.\n   *\n   * @param {Node|number} child Child or child’s index.\n   *\n   * @return {Node} This node for methods chain\n   *\n   * @example\n   * rule.nodes.length  //=> 5\n   * rule.removeChild(decl)\n   * rule.nodes.length  //=> 4\n   * decl.parent        //=> undefined\n   */\n  removeChild (child) {\n    child = this.index(child)\n    this.nodes[child].parent = undefined\n    this.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Removes all children from the container\n   * and cleans their parent properties.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * rule.removeAll()\n   * rule.nodes.length //=> 0\n   */\n  removeAll () {\n    for (let node of this.nodes) node.parent = undefined\n    this.nodes = []\n    return this\n  }\n\n  /**\n   * Passes all declaration values within the container that match pattern\n   * through callback, replacing those values with the returned result\n   * of callback.\n   *\n   * This method is useful if you are using a custom unit or function\n   * and need to iterate through all values.\n   *\n   * @param {string|RegExp} pattern      Replace pattern.\n   * @param {object} opts                Options to speed up the search.\n   * @param {string|string[]} opts.props An array of property names.\n   * @param {string} opts.fast           String that’s used to narrow down\n   *                                     values and speed up the regexp search.\n   * @param {function|string} callback   String to replace pattern or callback\n   *                                     that returns a new value. The callback\n   *                                     will receive the same arguments\n   *                                     as those passed to a function parameter\n   *                                     of `String#replace`.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * root.replaceValues(/\\d+rem/, { fast: 'rem' }, string => {\n   *   return 15 * parseInt(string) + 'px'\n   * })\n   */\n  replaceValues (pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = { }\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && opts.props.indexOf(decl.prop) === -1) return\n      if (opts.fast && decl.value.indexOf(opts.fast) === -1) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    return this\n  }\n\n  /**\n   * Returns `true` if callback returns `true`\n   * for all of the container’s children.\n   *\n   * @param {childCondition} condition Iterator returns true or false.\n   *\n   * @return {boolean} Is every child pass condition.\n   *\n   * @example\n   * const noPrefixes = rule.every(i => i.prop[0] !== '-')\n   */\n  every (condition) {\n    return this.nodes.every(condition)\n  }\n\n  /**\n   * Returns `true` if callback returns `true` for (at least) one\n   * of the container’s children.\n   *\n   * @param {childCondition} condition Iterator returns true or false.\n   *\n   * @return {boolean} Is some child pass condition.\n   *\n   * @example\n   * const hasPrefix = rule.some(i => i.prop[0] === '-')\n   */\n  some (condition) {\n    return this.nodes.some(condition)\n  }\n\n  /**\n   * Returns a `child`’s index within the {@link Container#nodes} array.\n   *\n   * @param {Node} child Child of the current container.\n   *\n   * @return {number} Child index.\n   *\n   * @example\n   * rule.index( rule.nodes[2] ) //=> 2\n   */\n  index (child) {\n    if (typeof child === 'number') {\n      return child\n    }\n    return this.nodes.indexOf(child)\n  }\n\n  /**\n   * The container’s first child.\n   *\n   * @type {Node}\n   *\n   * @example\n   * rule.first === rules.nodes[0]\n   */\n  get first () {\n    if (!this.nodes) return undefined\n    return this.nodes[0]\n  }\n\n  /**\n   * The container’s last child.\n   *\n   * @type {Node}\n   *\n   * @example\n   * rule.last === rule.nodes[rule.nodes.length - 1]\n   */\n  get last () {\n    if (!this.nodes) return undefined\n    return this.nodes[this.nodes.length - 1]\n  }\n\n  normalize (nodes, sample) {\n    if (typeof nodes === 'string') {\n      let parse = require('./parse')\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      let Rule = require('./rule')\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      let AtRule = require('./at-rule')\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      if (i.parent) i.parent.removeChild(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/[^\\s]/g, '')\n        }\n      }\n      i.parent = this\n      return i\n    })\n\n    return processed\n  }\n\n  /**\n   * @memberof Container#\n   * @member {Node[]} nodes An array containing the container’s children.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black }')\n   * root.nodes.length           //=> 1\n   * root.nodes[0].selector      //=> 'a'\n   * root.nodes[0].nodes[0].prop //=> 'color'\n   */\n}\n\nexport default Container\n\n/**\n * @callback childCondition\n * @param {Node} node    Container child.\n * @param {number} index Child index.\n * @param {Node[]} nodes All container children.\n * @return {boolean}\n */\n\n/**\n * @callback childIterator\n * @param {Node} node    Container child.\n * @param {number} index Child index.\n * @return {false|undefined} Returning `false` will break iteration.\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}