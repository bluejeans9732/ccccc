{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/**\n * Represents a plugin’s warning. It can be created using {@link Node#warn}.\n *\n * @example\n * if (decl.important) {\n *   decl.warn(result, 'Avoid !important', { word: '!important' })\n * }\n */\nvar Warning = /*#__PURE__*/function () {\n  /**\n   * @param {string} text        Warning message.\n   * @param {Object} [opts]      Warning options.\n   * @param {Node}   opts.node   CSS node that caused the warning.\n   * @param {string} opts.word   Word in CSS source that caused the warning.\n   * @param {number} opts.index  Index in CSS node string that caused\n   *                             the warning.\n   * @param {string} opts.plugin Name of the plugin that created\n   *                             this warning. {@link Result#warn} fills\n   *                             this property automatically.\n   */\n  function Warning(text, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    /**\n     * Type to filter warnings from {@link Result#messages}.\n     * Always equal to `\"warning\"`.\n     *\n     * @type {string}\n     *\n     * @example\n     * const nonWarning = result.messages.filter(i => i.type !== 'warning')\n     */\n    this.type = 'warning';\n    /**\n     * The warning message.\n     *\n     * @type {string}\n     *\n     * @example\n     * warning.text //=> 'Try to avoid !important'\n     */\n\n    this.text = text;\n    if (opts.node && opts.node.source) {\n      var pos = opts.node.positionBy(opts);\n      /**\n       * Line in the input file with this warning’s source.\n       * @type {number}\n       *\n       * @example\n       * warning.line //=> 5\n       */\n\n      this.line = pos.line;\n      /**\n       * Column in the input file with this warning’s source.\n       *\n       * @type {number}\n       *\n       * @example\n       * warning.column //=> 6\n       */\n\n      this.column = pos.column;\n    }\n    for (var opt in opts) {\n      this[opt] = opts[opt];\n    }\n  }\n  /**\n   * Returns a warning position and message.\n   *\n   * @example\n   * warning.toString() //=> 'postcss-lint:a.css:10:14: Avoid !important'\n   *\n   * @return {string} Warning position and message.\n   */\n\n  var _proto = Warning.prototype;\n  _proto.toString = function toString() {\n    if (this.node) {\n      return this.node.error(this.text, {\n        plugin: this.plugin,\n        index: this.index,\n        word: this.word\n      }).message;\n    }\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text;\n    }\n    return this.text;\n  }\n  /**\n   * @memberof Warning#\n   * @member {string} plugin The name of the plugin that created\n   *                         it will fill this property automatically.\n   *                         this warning. When you call {@link Node#warn}\n   *\n   * @example\n   * warning.plugin //=> 'postcss-important'\n   */\n\n  /**\n   * @memberof Warning#\n   * @member {Node} node Contains the CSS node that caused the warning.\n   *\n   * @example\n   * warning.node.toString() //=> 'color: white !important'\n   */;\n\n  return Warning;\n}();\nvar _default = Warning;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Warning","text","opts","type","node","source","pos","positionBy","line","column","opt","toString","error","plugin","index","word","message"],"sources":["C:\\Users\\dyd97\\OneDrive\\바탕 화면\\test-main\\node_modules\\postcss\\lib\\warning.es6"],"sourcesContent":["/**\n * Represents a plugin’s warning. It can be created using {@link Node#warn}.\n *\n * @example\n * if (decl.important) {\n *   decl.warn(result, 'Avoid !important', { word: '!important' })\n * }\n */\nclass Warning {\n  /**\n   * @param {string} text        Warning message.\n   * @param {Object} [opts]      Warning options.\n   * @param {Node}   opts.node   CSS node that caused the warning.\n   * @param {string} opts.word   Word in CSS source that caused the warning.\n   * @param {number} opts.index  Index in CSS node string that caused\n   *                             the warning.\n   * @param {string} opts.plugin Name of the plugin that created\n   *                             this warning. {@link Result#warn} fills\n   *                             this property automatically.\n   */\n  constructor (text, opts = { }) {\n    /**\n     * Type to filter warnings from {@link Result#messages}.\n     * Always equal to `\"warning\"`.\n     *\n     * @type {string}\n     *\n     * @example\n     * const nonWarning = result.messages.filter(i => i.type !== 'warning')\n     */\n    this.type = 'warning'\n    /**\n     * The warning message.\n     *\n     * @type {string}\n     *\n     * @example\n     * warning.text //=> 'Try to avoid !important'\n     */\n    this.text = text\n\n    if (opts.node && opts.node.source) {\n      let pos = opts.node.positionBy(opts)\n      /**\n       * Line in the input file with this warning’s source.\n       * @type {number}\n       *\n       * @example\n       * warning.line //=> 5\n       */\n      this.line = pos.line\n      /**\n       * Column in the input file with this warning’s source.\n       *\n       * @type {number}\n       *\n       * @example\n       * warning.column //=> 6\n       */\n      this.column = pos.column\n    }\n\n    for (let opt in opts) this[opt] = opts[opt]\n  }\n\n  /**\n   * Returns a warning position and message.\n   *\n   * @example\n   * warning.toString() //=> 'postcss-lint:a.css:10:14: Avoid !important'\n   *\n   * @return {string} Warning position and message.\n   */\n  toString () {\n    if (this.node) {\n      return this.node.error(this.text, {\n        plugin: this.plugin,\n        index: this.index,\n        word: this.word\n      }).message\n    }\n\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text\n    }\n\n    return this.text\n  }\n\n  /**\n   * @memberof Warning#\n   * @member {string} plugin The name of the plugin that created\n   *                         it will fill this property automatically.\n   *                         this warning. When you call {@link Node#warn}\n   *\n   * @example\n   * warning.plugin //=> 'postcss-important'\n   */\n\n  /**\n   * @memberof Warning#\n   * @member {Node} node Contains the CSS node that caused the warning.\n   *\n   * @example\n   * warning.node.toString() //=> 'color: white !important'\n   */\n}\n\nexport default Warning\n"],"mappings":";;;;;AAAA;;;;;;;;IAQMA,O;EACJ;;;;;;;;;;;EAWA,SAAAA,QAAaC,IAAb,EAAmBC,IAAnB,EAA+B;IAAA,IAAZA,IAAY;MAAZA,IAAY,GAAL,EAAK;IAAA;;IAC7B;;;;;;;;;IASA,KAAKC,IAAL,GAAY,SAAZ;IACA;;;;;;;;;IAQA,KAAKF,IAAL,GAAYA,IAAZ;IAEA,IAAIC,IAAI,CAACE,IAAL,IAAaF,IAAI,CAACE,IAAL,CAAUC,MAA3B,EAAmC;MACjC,IAAIC,GAAG,GAAGJ,IAAI,CAACE,IAAL,CAAUG,UAAV,CAAqBL,IAArB,CAAV;MACA;;;;;;;;MAOA,KAAKM,IAAL,GAAYF,GAAG,CAACE,IAAhB;MACA;;;;;;;;;MAQA,KAAKC,MAAL,GAAcH,GAAG,CAACG,MAAlB;IACD;IAED,KAAK,IAAIC,GAAT,IAAgBR,IAAhB;MAAsB,KAAKQ,GAAL,IAAYR,IAAI,CAACQ,GAAD,CAAhB;IAAtB;EACD;EAED;;;;;;;;;;SAQAC,Q,GAAA,SAAAA,SAAA,EAAY;IACV,IAAI,KAAKP,IAAT,EAAe;MACb,OAAO,KAAKA,IAAL,CAAUQ,KAAV,CAAgB,KAAKX,IAArB,EAA2B;QAChCY,MAAM,EAAE,KAAKA,MADmB;QAEhCC,KAAK,EAAE,KAAKA,KAFoB;QAGhCC,IAAI,EAAE,KAAKA;MAHqB,CAA3B,EAIJC,OAJH;IAKD;IAED,IAAI,KAAKH,MAAT,EAAiB;MACf,OAAO,KAAKA,MAAL,GAAc,IAAd,GAAqB,KAAKZ,IAAjC;IACD;IAED,OAAO,KAAKA,IAAZ;EACD;EAED;;;;;;;;;;EAUA;;;;;;KAAA;;;;eASaD,O"},"metadata":{},"sourceType":"script","externalDependencies":[]}