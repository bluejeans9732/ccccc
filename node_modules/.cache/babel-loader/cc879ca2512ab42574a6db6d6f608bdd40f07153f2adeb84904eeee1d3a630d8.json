{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _cssSyntaxError = _interopRequireDefault(require(\"./css-syntax-error\"));\nvar _stringifier = _interopRequireDefault(require(\"./stringifier\"));\nvar _stringify = _interopRequireDefault(require(\"./stringify\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction cloneNode(obj, parent) {\n  var cloned = new obj.constructor();\n  for (var i in obj) {\n    if (!obj.hasOwnProperty(i)) continue;\n    var value = obj[i];\n    var type = typeof value;\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent;\n    } else if (i === 'source') {\n      cloned[i] = value;\n    } else if (value instanceof Array) {\n      cloned[i] = value.map(function (j) {\n        return cloneNode(j, cloned);\n      });\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value);\n      cloned[i] = value;\n    }\n  }\n  return cloned;\n}\n/**\n * All node classes inherit the following common methods.\n *\n * @abstract\n */\n\nvar Node = /*#__PURE__*/function () {\n  /**\n   * @param {object} [defaults] Value for node properties.\n   */\n  function Node(defaults) {\n    if (defaults === void 0) {\n      defaults = {};\n    }\n    this.raws = {};\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof defaults !== 'object' && typeof defaults !== 'undefined') {\n        throw new Error('PostCSS nodes constructor accepts object, not ' + JSON.stringify(defaults));\n      }\n    }\n    for (var name in defaults) {\n      this[name] = defaults[name];\n    }\n  }\n  /**\n   * Returns a `CssSyntaxError` instance containing the original position\n   * of the node in the source, showing line and column numbers and also\n   * a small excerpt to facilitate debugging.\n   *\n   * If present, an input source map will be used to get the original position\n   * of the source, even from a previous compilation step\n   * (e.g., from Sass compilation).\n   *\n   * This method produces very useful error messages.\n   *\n   * @param {string} message     Error description.\n   * @param {object} [opts]      Options.\n   * @param {string} opts.plugin Plugin name that created this error.\n   *                             PostCSS will set it automatically.\n   * @param {string} opts.word   A word inside a node’s string that should\n   *                             be highlighted as the source of the error.\n   * @param {number} opts.index  An index inside a node’s string that should\n   *                             be highlighted as the source of the error.\n   *\n   * @return {CssSyntaxError} Error object to throw it.\n   *\n   * @example\n   * if (!variables[name]) {\n   *   throw decl.error('Unknown variable ' + name, { word: name })\n   *   // CssSyntaxError: postcss-vars:a.sass:4:3: Unknown variable $black\n   *   //   color: $black\n   *   // a\n   *   //          ^\n   *   //   background: white\n   * }\n   */\n\n  var _proto = Node.prototype;\n  _proto.error = function error(message, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    if (this.source) {\n      var pos = this.positionBy(opts);\n      return this.source.input.error(message, pos.line, pos.column, opts);\n    }\n    return new _cssSyntaxError.default(message);\n  }\n  /**\n   * This method is provided as a convenience wrapper for {@link Result#warn}.\n   *\n   * @param {Result} result      The {@link Result} instance\n   *                             that will receive the warning.\n   * @param {string} text        Warning message.\n   * @param {object} [opts]      Options\n   * @param {string} opts.plugin Plugin name that created this warning.\n   *                             PostCSS will set it automatically.\n   * @param {string} opts.word   A word inside a node’s string that should\n   *                             be highlighted as the source of the warning.\n   * @param {number} opts.index  An index inside a node’s string that should\n   *                             be highlighted as the source of the warning.\n   *\n   * @return {Warning} Created warning object.\n   *\n   * @example\n   * const plugin = postcss.plugin('postcss-deprecated', () => {\n   *   return (root, result) => {\n   *     root.walkDecls('bad', decl => {\n   *       decl.warn(result, 'Deprecated property bad')\n   *     })\n   *   }\n   * })\n   */;\n\n  _proto.warn = function warn(result, text, opts) {\n    var data = {\n      node: this\n    };\n    for (var i in opts) {\n      data[i] = opts[i];\n    }\n    return result.warn(text, data);\n  }\n  /**\n   * Removes the node from its parent and cleans the parent properties\n   * from the node and its children.\n   *\n   * @example\n   * if (decl.prop.match(/^-webkit-/)) {\n   *   decl.remove()\n   * }\n   *\n   * @return {Node} Node to make calls chain.\n   */;\n\n  _proto.remove = function remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    }\n    this.parent = undefined;\n    return this;\n  }\n  /**\n   * Returns a CSS string representing the node.\n   *\n   * @param {stringifier|syntax} [stringifier] A syntax to use\n   *                                           in string generation.\n   *\n   * @return {string} CSS string of this node.\n   *\n   * @example\n   * postcss.rule({ selector: 'a' }).toString() //=> \"a {}\"\n   */;\n\n  _proto.toString = function toString(stringifier) {\n    if (stringifier === void 0) {\n      stringifier = _stringify.default;\n    }\n    if (stringifier.stringify) stringifier = stringifier.stringify;\n    var result = '';\n    stringifier(this, function (i) {\n      result += i;\n    });\n    return result;\n  }\n  /**\n   * Returns an exact clone of the node.\n   *\n   * The resulting cloned node and its (cloned) children will retain\n   * code style properties.\n   *\n   * @param {object} [overrides] New properties to override in the clone.\n   *\n   * @example\n   * decl.raws.before    //=> \"\\n  \"\n   * const cloned = decl.clone({ prop: '-moz-' + decl.prop })\n   * cloned.raws.before  //=> \"\\n  \"\n   * cloned.toString()   //=> -moz-transform: scale(0)\n   *\n   * @return {Node} Clone of the node.\n   */;\n\n  _proto.clone = function clone(overrides) {\n    if (overrides === void 0) {\n      overrides = {};\n    }\n    var cloned = cloneNode(this);\n    for (var name in overrides) {\n      cloned[name] = overrides[name];\n    }\n    return cloned;\n  }\n  /**\n   * Shortcut to clone the node and insert the resulting cloned node\n   * before the current node.\n   *\n   * @param {object} [overrides] Mew properties to override in the clone.\n   *\n   * @example\n   * decl.cloneBefore({ prop: '-moz-' + decl.prop })\n   *\n   * @return {Node} New node\n   */;\n\n  _proto.cloneBefore = function cloneBefore(overrides) {\n    if (overrides === void 0) {\n      overrides = {};\n    }\n    var cloned = this.clone(overrides);\n    this.parent.insertBefore(this, cloned);\n    return cloned;\n  }\n  /**\n   * Shortcut to clone the node and insert the resulting cloned node\n   * after the current node.\n   *\n   * @param {object} [overrides] New properties to override in the clone.\n   *\n   * @return {Node} New node.\n   */;\n\n  _proto.cloneAfter = function cloneAfter(overrides) {\n    if (overrides === void 0) {\n      overrides = {};\n    }\n    var cloned = this.clone(overrides);\n    this.parent.insertAfter(this, cloned);\n    return cloned;\n  }\n  /**\n   * Inserts node(s) before the current node and removes the current node.\n   *\n   * @param {...Node} nodes Mode(s) to replace current one.\n   *\n   * @example\n   * if (atrule.name === 'mixin') {\n   *   atrule.replaceWith(mixinRules[atrule.params])\n   * }\n   *\n   * @return {Node} Current node to methods chain.\n   */;\n\n  _proto.replaceWith = function replaceWith() {\n    if (this.parent) {\n      for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {\n        nodes[_key] = arguments[_key];\n      }\n      for (var _i = 0, _nodes = nodes; _i < _nodes.length; _i++) {\n        var node = _nodes[_i];\n        this.parent.insertBefore(this, node);\n      }\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * Returns the next child of the node’s parent.\n   * Returns `undefined` if the current node is the last child.\n   *\n   * @return {Node|undefined} Next node.\n   *\n   * @example\n   * if (comment.text === 'delete next') {\n   *   const next = comment.next()\n   *   if (next) {\n   *     next.remove()\n   *   }\n   * }\n   */;\n\n  _proto.next = function next() {\n    if (!this.parent) return undefined;\n    var index = this.parent.index(this);\n    return this.parent.nodes[index + 1];\n  }\n  /**\n   * Returns the previous child of the node’s parent.\n   * Returns `undefined` if the current node is the first child.\n   *\n   * @return {Node|undefined} Previous node.\n   *\n   * @example\n   * const annotation = decl.prev()\n   * if (annotation.type === 'comment') {\n   *   readAnnotation(annotation.text)\n   * }\n   */;\n\n  _proto.prev = function prev() {\n    if (!this.parent) return undefined;\n    var index = this.parent.index(this);\n    return this.parent.nodes[index - 1];\n  }\n  /**\n   * Insert new node before current node to current node’s parent.\n   *\n   * Just alias for `node.parent.insertBefore(node, add)`.\n   *\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * decl.before('content: \"\"')\n   */;\n\n  _proto.before = function before(add) {\n    this.parent.insertBefore(this, add);\n    return this;\n  }\n  /**\n   * Insert new node after current node to current node’s parent.\n   *\n   * Just alias for `node.parent.insertAfter(node, add)`.\n   *\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * decl.after('color: black')\n   */;\n\n  _proto.after = function after(add) {\n    this.parent.insertAfter(this, add);\n    return this;\n  };\n  _proto.toJSON = function toJSON() {\n    var fixed = {};\n    for (var name in this) {\n      if (!this.hasOwnProperty(name)) continue;\n      if (name === 'parent') continue;\n      var value = this[name];\n      if (value instanceof Array) {\n        fixed[name] = value.map(function (i) {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON();\n          } else {\n            return i;\n          }\n        });\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON();\n      } else {\n        fixed[name] = value;\n      }\n    }\n    return fixed;\n  }\n  /**\n   * Returns a {@link Node#raws} value. If the node is missing\n   * the code style property (because the node was manually built or cloned),\n   * PostCSS will try to autodetect the code style property by looking\n   * at other nodes in the tree.\n   *\n   * @param {string} prop          Name of code style property.\n   * @param {string} [defaultType] Name of default value, it can be missed\n   *                               if the value is the same as prop.\n   *\n   * @example\n   * const root = postcss.parse('a { background: white }')\n   * root.nodes[0].append({ prop: 'color', value: 'black' })\n   * root.nodes[0].nodes[1].raws.before   //=> undefined\n   * root.nodes[0].nodes[1].raw('before') //=> ' '\n   *\n   * @return {string} Code style value.\n   */;\n\n  _proto.raw = function raw(prop, defaultType) {\n    var str = new _stringifier.default();\n    return str.raw(this, prop, defaultType);\n  }\n  /**\n   * Finds the Root instance of the node’s tree.\n   *\n   * @example\n   * root.nodes[0].nodes[0].root() === root\n   *\n   * @return {Root} Root parent.\n   */;\n\n  _proto.root = function root() {\n    var result = this;\n    while (result.parent) {\n      result = result.parent;\n    }\n    return result;\n  }\n  /**\n   * Clear the code style properties for the node and its children.\n   *\n   * @param {boolean} [keepBetween] Keep the raws.between symbols.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * node.raws.before  //=> ' '\n   * node.cleanRaws()\n   * node.raws.before  //=> undefined\n   */;\n\n  _proto.cleanRaws = function cleanRaws(keepBetween) {\n    delete this.raws.before;\n    delete this.raws.after;\n    if (!keepBetween) delete this.raws.between;\n  };\n  _proto.positionInside = function positionInside(index) {\n    var string = this.toString();\n    var column = this.source.start.column;\n    var line = this.source.start.line;\n    for (var i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1;\n        line += 1;\n      } else {\n        column += 1;\n      }\n    }\n    return {\n      line: line,\n      column: column\n    };\n  };\n  _proto.positionBy = function positionBy(opts) {\n    var pos = this.source.start;\n    if (opts.index) {\n      pos = this.positionInside(opts.index);\n    } else if (opts.word) {\n      var index = this.toString().indexOf(opts.word);\n      if (index !== -1) pos = this.positionInside(index);\n    }\n    return pos;\n  }\n  /**\n   * @memberof Node#\n   * @member {string} type String representing the node’s type.\n   *                       Possible values are `root`, `atrule`, `rule`,\n   *                       `decl`, or `comment`.\n   *\n   * @example\n   * postcss.decl({ prop: 'color', value: 'black' }).type //=> 'decl'\n   */\n\n  /**\n   * @memberof Node#\n   * @member {Container} parent The node’s parent node.\n   *\n   * @example\n   * root.nodes[0].parent === root\n   */\n\n  /**\n   * @memberof Node#\n   * @member {source} source The input source of the node.\n   *\n   * The property is used in source map generation.\n   *\n   * If you create a node manually (e.g., with `postcss.decl()`),\n   * that node will not have a `source` property and will be absent\n   * from the source map. For this reason, the plugin developer should\n   * consider cloning nodes to create new ones (in which case the new node’s\n   * source will reference the original, cloned node) or setting\n   * the `source` property manually.\n   *\n   * ```js\n   * // Bad\n   * const prefixed = postcss.decl({\n   *   prop: '-moz-' + decl.prop,\n   *   value: decl.value\n   * })\n   *\n   * // Good\n   * const prefixed = decl.clone({ prop: '-moz-' + decl.prop })\n   * ```\n   *\n   * ```js\n   * if (atrule.name === 'add-link') {\n   *   const rule = postcss.rule({ selector: 'a', source: atrule.source })\n   *   atrule.parent.insertBefore(atrule, rule)\n   * }\n   * ```\n   *\n   * @example\n   * decl.source.input.from //=> '/home/ai/a.sass'\n   * decl.source.start      //=> { line: 10, column: 2 }\n   * decl.source.end        //=> { line: 10, column: 12 }\n   */\n\n  /**\n   * @memberof Node#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node. It also stores `*`\n   *   and `_` symbols before the declaration (IE hack).\n   * * `after`: the space symbols after the last child of the node\n   *   to the end of the node.\n   * * `between`: the symbols between the property and value\n   *   for declarations, selector and `{` for rules, or last parameter\n   *   and `{` for at-rules.\n   * * `semicolon`: contains true if the last child has\n   *   an (optional) semicolon.\n   * * `afterName`: the space between the at-rule name and its parameters.\n   * * `left`: the space symbols between `/*` and the comment’s text.\n   * * `right`: the space symbols between the comment’s text\n   *   and <code>*&#47;</code>.\n   * * `important`: the content of the important statement,\n   *   if it is not just `!important`.\n   *\n   * PostCSS cleans selectors, declaration values and at-rule parameters\n   * from comments and extra spaces, but it stores origin content in raws\n   * properties. As such, if you don’t change a declaration’s value,\n   * PostCSS will use the raw value with comments.\n   *\n   * @example\n   * const root = postcss.parse('a {\\n  color:black\\n}')\n   * root.first.first.raws //=> { before: '\\n  ', between: ':' }\n   */;\n\n  return Node;\n}();\nvar _default = Node;\n/**\n * @typedef {object} position\n * @property {number} line   Source line in file.\n * @property {number} column Source column in file.\n */\n\n/**\n * @typedef {object} source\n * @property {Input} input    {@link Input} with input file\n * @property {position} start The starting position of the node’s source.\n * @property {position} end   The ending position of the node’s source.\n */\n\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_cssSyntaxError","_interopRequireDefault","require","_stringifier","_stringify","cloneNode","obj","parent","cloned","constructor","i","hasOwnProperty","value","type","Array","map","j","Node","defaults","raws","process","env","NODE_ENV","Error","JSON","stringify","name","error","message","opts","source","pos","positionBy","input","line","column","default","warn","result","text","data","node","remove","removeChild","undefined","toString","stringifier","clone","overrides","cloneBefore","insertBefore","cloneAfter","insertAfter","replaceWith","_len","arguments","length","nodes","_key","_i","_nodes","next","index","prev","before","add","after","toJSON","fixed","raw","prop","defaultType","str","root","cleanRaws","keepBetween","between","positionInside","string","start","word","indexOf"],"sources":["C:\\Users\\dyd97\\OneDrive\\바탕 화면\\test-main\\node_modules\\postcss\\lib\\node.es6"],"sourcesContent":["import CssSyntaxError from './css-syntax-error'\nimport Stringifier from './stringifier'\nimport stringify from './stringify'\n\nfunction cloneNode (obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!obj.hasOwnProperty(i)) continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (value instanceof Array) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\n/**\n * All node classes inherit the following common methods.\n *\n * @abstract\n */\nclass Node {\n  /**\n   * @param {object} [defaults] Value for node properties.\n   */\n  constructor (defaults = { }) {\n    this.raws = { }\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof defaults !== 'object' && typeof defaults !== 'undefined') {\n        throw new Error(\n          'PostCSS nodes constructor accepts object, not ' +\n          JSON.stringify(defaults)\n        )\n      }\n    }\n    for (let name in defaults) {\n      this[name] = defaults[name]\n    }\n  }\n\n  /**\n   * Returns a `CssSyntaxError` instance containing the original position\n   * of the node in the source, showing line and column numbers and also\n   * a small excerpt to facilitate debugging.\n   *\n   * If present, an input source map will be used to get the original position\n   * of the source, even from a previous compilation step\n   * (e.g., from Sass compilation).\n   *\n   * This method produces very useful error messages.\n   *\n   * @param {string} message     Error description.\n   * @param {object} [opts]      Options.\n   * @param {string} opts.plugin Plugin name that created this error.\n   *                             PostCSS will set it automatically.\n   * @param {string} opts.word   A word inside a node’s string that should\n   *                             be highlighted as the source of the error.\n   * @param {number} opts.index  An index inside a node’s string that should\n   *                             be highlighted as the source of the error.\n   *\n   * @return {CssSyntaxError} Error object to throw it.\n   *\n   * @example\n   * if (!variables[name]) {\n   *   throw decl.error('Unknown variable ' + name, { word: name })\n   *   // CssSyntaxError: postcss-vars:a.sass:4:3: Unknown variable $black\n   *   //   color: $black\n   *   // a\n   *   //          ^\n   *   //   background: white\n   * }\n   */\n  error (message, opts = { }) {\n    if (this.source) {\n      let pos = this.positionBy(opts)\n      return this.source.input.error(message, pos.line, pos.column, opts)\n    }\n    return new CssSyntaxError(message)\n  }\n\n  /**\n   * This method is provided as a convenience wrapper for {@link Result#warn}.\n   *\n   * @param {Result} result      The {@link Result} instance\n   *                             that will receive the warning.\n   * @param {string} text        Warning message.\n   * @param {object} [opts]      Options\n   * @param {string} opts.plugin Plugin name that created this warning.\n   *                             PostCSS will set it automatically.\n   * @param {string} opts.word   A word inside a node’s string that should\n   *                             be highlighted as the source of the warning.\n   * @param {number} opts.index  An index inside a node’s string that should\n   *                             be highlighted as the source of the warning.\n   *\n   * @return {Warning} Created warning object.\n   *\n   * @example\n   * const plugin = postcss.plugin('postcss-deprecated', () => {\n   *   return (root, result) => {\n   *     root.walkDecls('bad', decl => {\n   *       decl.warn(result, 'Deprecated property bad')\n   *     })\n   *   }\n   * })\n   */\n  warn (result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  /**\n   * Removes the node from its parent and cleans the parent properties\n   * from the node and its children.\n   *\n   * @example\n   * if (decl.prop.match(/^-webkit-/)) {\n   *   decl.remove()\n   * }\n   *\n   * @return {Node} Node to make calls chain.\n   */\n  remove () {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  /**\n   * Returns a CSS string representing the node.\n   *\n   * @param {stringifier|syntax} [stringifier] A syntax to use\n   *                                           in string generation.\n   *\n   * @return {string} CSS string of this node.\n   *\n   * @example\n   * postcss.rule({ selector: 'a' }).toString() //=> \"a {}\"\n   */\n  toString (stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  /**\n   * Returns an exact clone of the node.\n   *\n   * The resulting cloned node and its (cloned) children will retain\n   * code style properties.\n   *\n   * @param {object} [overrides] New properties to override in the clone.\n   *\n   * @example\n   * decl.raws.before    //=> \"\\n  \"\n   * const cloned = decl.clone({ prop: '-moz-' + decl.prop })\n   * cloned.raws.before  //=> \"\\n  \"\n   * cloned.toString()   //=> -moz-transform: scale(0)\n   *\n   * @return {Node} Clone of the node.\n   */\n  clone (overrides = { }) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  /**\n   * Shortcut to clone the node and insert the resulting cloned node\n   * before the current node.\n   *\n   * @param {object} [overrides] Mew properties to override in the clone.\n   *\n   * @example\n   * decl.cloneBefore({ prop: '-moz-' + decl.prop })\n   *\n   * @return {Node} New node\n   */\n  cloneBefore (overrides = { }) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  /**\n   * Shortcut to clone the node and insert the resulting cloned node\n   * after the current node.\n   *\n   * @param {object} [overrides] New properties to override in the clone.\n   *\n   * @return {Node} New node.\n   */\n  cloneAfter (overrides = { }) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  /**\n   * Inserts node(s) before the current node and removes the current node.\n   *\n   * @param {...Node} nodes Mode(s) to replace current one.\n   *\n   * @example\n   * if (atrule.name === 'mixin') {\n   *   atrule.replaceWith(mixinRules[atrule.params])\n   * }\n   *\n   * @return {Node} Current node to methods chain.\n   */\n  replaceWith (...nodes) {\n    if (this.parent) {\n      for (let node of nodes) {\n        this.parent.insertBefore(this, node)\n      }\n\n      this.remove()\n    }\n\n    return this\n  }\n\n  /**\n   * Returns the next child of the node’s parent.\n   * Returns `undefined` if the current node is the last child.\n   *\n   * @return {Node|undefined} Next node.\n   *\n   * @example\n   * if (comment.text === 'delete next') {\n   *   const next = comment.next()\n   *   if (next) {\n   *     next.remove()\n   *   }\n   * }\n   */\n  next () {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  /**\n   * Returns the previous child of the node’s parent.\n   * Returns `undefined` if the current node is the first child.\n   *\n   * @return {Node|undefined} Previous node.\n   *\n   * @example\n   * const annotation = decl.prev()\n   * if (annotation.type === 'comment') {\n   *   readAnnotation(annotation.text)\n   * }\n   */\n  prev () {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  /**\n   * Insert new node before current node to current node’s parent.\n   *\n   * Just alias for `node.parent.insertBefore(node, add)`.\n   *\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * decl.before('content: \"\"')\n   */\n  before (add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  /**\n   * Insert new node after current node to current node’s parent.\n   *\n   * Just alias for `node.parent.insertAfter(node, add)`.\n   *\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * decl.after('color: black')\n   */\n  after (add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  toJSON () {\n    let fixed = { }\n\n    for (let name in this) {\n      if (!this.hasOwnProperty(name)) continue\n      if (name === 'parent') continue\n      let value = this[name]\n\n      if (value instanceof Array) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON()\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON()\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    return fixed\n  }\n\n  /**\n   * Returns a {@link Node#raws} value. If the node is missing\n   * the code style property (because the node was manually built or cloned),\n   * PostCSS will try to autodetect the code style property by looking\n   * at other nodes in the tree.\n   *\n   * @param {string} prop          Name of code style property.\n   * @param {string} [defaultType] Name of default value, it can be missed\n   *                               if the value is the same as prop.\n   *\n   * @example\n   * const root = postcss.parse('a { background: white }')\n   * root.nodes[0].append({ prop: 'color', value: 'black' })\n   * root.nodes[0].nodes[1].raws.before   //=> undefined\n   * root.nodes[0].nodes[1].raw('before') //=> ' '\n   *\n   * @return {string} Code style value.\n   */\n  raw (prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  /**\n   * Finds the Root instance of the node’s tree.\n   *\n   * @example\n   * root.nodes[0].nodes[0].root() === root\n   *\n   * @return {Root} Root parent.\n   */\n  root () {\n    let result = this\n    while (result.parent) result = result.parent\n    return result\n  }\n\n  /**\n   * Clear the code style properties for the node and its children.\n   *\n   * @param {boolean} [keepBetween] Keep the raws.between symbols.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * node.raws.before  //=> ' '\n   * node.cleanRaws()\n   * node.raws.before  //=> undefined\n   */\n  cleanRaws (keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  positionInside (index) {\n    let string = this.toString()\n    let column = this.source.start.column\n    let line = this.source.start.line\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { line, column }\n  }\n\n  positionBy (opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  /**\n   * @memberof Node#\n   * @member {string} type String representing the node’s type.\n   *                       Possible values are `root`, `atrule`, `rule`,\n   *                       `decl`, or `comment`.\n   *\n   * @example\n   * postcss.decl({ prop: 'color', value: 'black' }).type //=> 'decl'\n   */\n\n  /**\n   * @memberof Node#\n   * @member {Container} parent The node’s parent node.\n   *\n   * @example\n   * root.nodes[0].parent === root\n   */\n\n  /**\n   * @memberof Node#\n   * @member {source} source The input source of the node.\n   *\n   * The property is used in source map generation.\n   *\n   * If you create a node manually (e.g., with `postcss.decl()`),\n   * that node will not have a `source` property and will be absent\n   * from the source map. For this reason, the plugin developer should\n   * consider cloning nodes to create new ones (in which case the new node’s\n   * source will reference the original, cloned node) or setting\n   * the `source` property manually.\n   *\n   * ```js\n   * // Bad\n   * const prefixed = postcss.decl({\n   *   prop: '-moz-' + decl.prop,\n   *   value: decl.value\n   * })\n   *\n   * // Good\n   * const prefixed = decl.clone({ prop: '-moz-' + decl.prop })\n   * ```\n   *\n   * ```js\n   * if (atrule.name === 'add-link') {\n   *   const rule = postcss.rule({ selector: 'a', source: atrule.source })\n   *   atrule.parent.insertBefore(atrule, rule)\n   * }\n   * ```\n   *\n   * @example\n   * decl.source.input.from //=> '/home/ai/a.sass'\n   * decl.source.start      //=> { line: 10, column: 2 }\n   * decl.source.end        //=> { line: 10, column: 12 }\n   */\n\n  /**\n   * @memberof Node#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node. It also stores `*`\n   *   and `_` symbols before the declaration (IE hack).\n   * * `after`: the space symbols after the last child of the node\n   *   to the end of the node.\n   * * `between`: the symbols between the property and value\n   *   for declarations, selector and `{` for rules, or last parameter\n   *   and `{` for at-rules.\n   * * `semicolon`: contains true if the last child has\n   *   an (optional) semicolon.\n   * * `afterName`: the space between the at-rule name and its parameters.\n   * * `left`: the space symbols between `/*` and the comment’s text.\n   * * `right`: the space symbols between the comment’s text\n   *   and <code>*&#47;</code>.\n   * * `important`: the content of the important statement,\n   *   if it is not just `!important`.\n   *\n   * PostCSS cleans selectors, declaration values and at-rule parameters\n   * from comments and extra spaces, but it stores origin content in raws\n   * properties. As such, if you don’t change a declaration’s value,\n   * PostCSS will use the raw value with comments.\n   *\n   * @example\n   * const root = postcss.parse('a {\\n  color:black\\n}')\n   * root.first.first.raws //=> { before: '\\n  ', between: ':' }\n   */\n}\n\nexport default Node\n\n/**\n * @typedef {object} position\n * @property {number} line   Source line in file.\n * @property {number} column Source column in file.\n */\n\n/**\n * @typedef {object} source\n * @property {Input} input    {@link Input} with input file\n * @property {position} start The starting position of the node’s source.\n * @property {position} end   The ending position of the node’s source.\n */\n"],"mappings":";;;;AAAA,IAAAA,eAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,UAAA,GAAAH,sBAAA,CAAAC,OAAA;;;;;;AAEA,SAASG,SAATA,CAAoBC,GAApB,EAAyBC,MAAzB,EAAiC;EAC/B,IAAIC,MAAM,GAAG,IAAIF,GAAG,CAACG,WAAR,EAAb;EAEA,KAAK,IAAIC,CAAT,IAAcJ,GAAd,EAAmB;IACjB,IAAI,CAACA,GAAG,CAACK,cAAJ,CAAmBD,CAAnB,CAAL,EAA4B;IAC5B,IAAIE,KAAK,GAAGN,GAAG,CAACI,CAAD,CAAf;IACA,IAAIG,IAAI,GAAG,OAAOD,KAAlB;IAEA,IAAIF,CAAC,KAAK,QAAN,IAAkBG,IAAI,KAAK,QAA/B,EAAyC;MACvC,IAAIN,MAAJ,EAAYC,MAAM,CAACE,CAAD,CAAN,GAAYH,MAAZ;IACb,CAFD,MAEO,IAAIG,CAAC,KAAK,QAAV,EAAoB;MACzBF,MAAM,CAACE,CAAD,CAAN,GAAYE,KAAZ;IACD,CAFM,MAEA,IAAIA,KAAK,YAAYE,KAArB,EAA4B;MACjCN,MAAM,CAACE,CAAD,CAAN,GAAYE,KAAK,CAACG,GAAN,CAAU,UAAAC,CAAC;QAAA,OAAIX,SAAS,CAACW,CAAD,EAAIR,MAAJ,CAAb;MAAA,CAAX,CAAZ;IACD,CAFM,MAEA;MACL,IAAIK,IAAI,KAAK,QAAT,IAAqBD,KAAK,KAAK,IAAnC,EAAyCA,KAAK,GAAGP,SAAS,CAACO,KAAD,CAAjB;MACzCJ,MAAM,CAACE,CAAD,CAAN,GAAYE,KAAZ;IACD;EACF;EAED,OAAOJ,MAAP;AACD;AAED;;;;;;IAKMS,I;EACJ;;;EAGA,SAAAA,KAAaC,QAAb,EAA6B;IAAA,IAAhBA,QAAgB;MAAhBA,QAAgB,GAAL,EAAK;IAAA;IAC3B,KAAKC,IAAL,GAAY,EAAZ;IACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzC,IAAI,OAAOJ,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAP,KAAoB,WAAxD,EAAqE;QACnE,MAAM,IAAIK,KAAJ,CACJ,mDACAC,IAAI,CAACC,SAAL,CAAeP,QAAf,CAFI,CAAN;MAID;IACF;IACD,KAAK,IAAIQ,IAAT,IAAiBR,QAAjB,EAA2B;MACzB,KAAKQ,IAAL,IAAaR,QAAQ,CAACQ,IAAD,CAArB;IACD;EACF;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAgCAC,K,GAAA,SAAAA,MAAOC,OAAP,EAAgBC,IAAhB,EAA4B;IAAA,IAAZA,IAAY;MAAZA,IAAY,GAAL,EAAK;IAAA;IAC1B,IAAI,KAAKC,MAAT,EAAiB;MACf,IAAIC,GAAG,GAAG,KAAKC,UAAL,CAAgBH,IAAhB,CAAV;MACA,OAAO,KAAKC,MAAL,CAAYG,KAAZ,CAAkBN,KAAlB,CAAwBC,OAAxB,EAAiCG,GAAG,CAACG,IAArC,EAA2CH,GAAG,CAACI,MAA/C,EAAuDN,IAAvD,CAAP;IACD;IACD,OAAO,IAAI7B,eAAA,CAAAoC,OAAJ,CAAmBR,OAAnB,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;KAAA;;SAyBAS,I,GAAA,SAAAA,KAAMC,MAAN,EAAcC,IAAd,EAAoBV,IAApB,EAA0B;IACxB,IAAIW,IAAI,GAAG;MAAEC,IAAI,EAAE;IAAR,CAAX;IACA,KAAK,IAAI/B,CAAT,IAAcmB,IAAd;MAAoBW,IAAI,CAAC9B,CAAD,CAAJ,GAAUmB,IAAI,CAACnB,CAAD,CAAd;IAApB;IACA,OAAO4B,MAAM,CAACD,IAAP,CAAYE,IAAZ,EAAkBC,IAAlB,CAAP;EACD;EAED;;;;;;;;;;KAAA;;SAWAE,M,GAAA,SAAAA,OAAA,EAAU;IACR,IAAI,KAAKnC,MAAT,EAAiB;MACf,KAAKA,MAAL,CAAYoC,WAAZ,CAAwB,IAAxB;IACD;IACD,KAAKpC,MAAL,GAAcqC,SAAd;IACA,OAAO,IAAP;EACD;EAED;;;;;;;;;;KAAA;;SAWAC,Q,GAAA,SAAAA,SAAUC,WAAV,EAAmC;IAAA,IAAzBA,WAAyB;MAAzBA,WAAyB,GAAX1C,UAAA,CAAAgC,OAAW;IAAA;IACjC,IAAIU,WAAW,CAACrB,SAAhB,EAA2BqB,WAAW,GAAGA,WAAW,CAACrB,SAA1B;IAC3B,IAAIa,MAAM,GAAG,EAAb;IACAQ,WAAW,CAAC,IAAD,EAAO,UAAApC,CAAC,EAAI;MACrB4B,MAAM,IAAI5B,CAAV;IACD,CAFU,CAAX;IAGA,OAAO4B,MAAP;EACD;EAED;;;;;;;;;;;;;;;KAAA;;SAgBAS,K,GAAA,SAAAA,MAAOC,SAAP,EAAwB;IAAA,IAAjBA,SAAiB;MAAjBA,SAAiB,GAAL,EAAK;IAAA;IACtB,IAAIxC,MAAM,GAAGH,SAAS,CAAC,IAAD,CAAtB;IACA,KAAK,IAAIqB,IAAT,IAAiBsB,SAAjB,EAA4B;MAC1BxC,MAAM,CAACkB,IAAD,CAAN,GAAesB,SAAS,CAACtB,IAAD,CAAxB;IACD;IACD,OAAOlB,MAAP;EACD;EAED;;;;;;;;;;KAAA;;SAWAyC,W,GAAA,SAAAA,YAAaD,SAAb,EAA8B;IAAA,IAAjBA,SAAiB;MAAjBA,SAAiB,GAAL,EAAK;IAAA;IAC5B,IAAIxC,MAAM,GAAG,KAAKuC,KAAL,CAAWC,SAAX,CAAb;IACA,KAAKzC,MAAL,CAAY2C,YAAZ,CAAyB,IAAzB,EAA+B1C,MAA/B;IACA,OAAOA,MAAP;EACD;EAED;;;;;;;KAAA;;SAQA2C,U,GAAA,SAAAA,WAAYH,SAAZ,EAA6B;IAAA,IAAjBA,SAAiB;MAAjBA,SAAiB,GAAL,EAAK;IAAA;IAC3B,IAAIxC,MAAM,GAAG,KAAKuC,KAAL,CAAWC,SAAX,CAAb;IACA,KAAKzC,MAAL,CAAY6C,WAAZ,CAAwB,IAAxB,EAA8B5C,MAA9B;IACA,OAAOA,MAAP;EACD;EAED;;;;;;;;;;;KAAA;;SAYA6C,W,GAAA,SAAAA,YAAA,EAAuB;IACrB,IAAI,KAAK9C,MAAT,EAAiB;MAAA,SAAA+C,IAAA,GAAAC,SAAA,CAAAC,MAAA,EADHC,KACG,OAAA3C,KAAA,CAAAwC,IAAA,GAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;QADHD,KACG,CAAAC,IAAA,IAAAH,SAAA,CAAAG,IAAA;MAAA;MACf,SAAAC,EAAA,MAAAC,MAAA,GAAiBH,KAAjB,EAAAE,EAAA,GAAAC,MAAA,CAAAJ,MAAA,EAAAG,EAAA,IAAwB;QAAnB,IAAIlB,IAAI,GAAAmB,MAAA,CAAAD,EAAA,CAAR;QACH,KAAKpD,MAAL,CAAY2C,YAAZ,CAAyB,IAAzB,EAA+BT,IAA/B;MACD;MAED,KAAKC,MAAL;IACD;IAED,OAAO,IAAP;EACD;EAED;;;;;;;;;;;;;KAAA;;SAcAmB,I,GAAA,SAAAA,KAAA,EAAQ;IACN,IAAI,CAAC,KAAKtD,MAAV,EAAkB,OAAOqC,SAAP;IAClB,IAAIkB,KAAK,GAAG,KAAKvD,MAAL,CAAYuD,KAAZ,CAAkB,IAAlB,CAAZ;IACA,OAAO,KAAKvD,MAAL,CAAYkD,KAAZ,CAAkBK,KAAK,GAAG,CAA1B,CAAP;EACD;EAED;;;;;;;;;;;KAAA;;SAYAC,I,GAAA,SAAAA,KAAA,EAAQ;IACN,IAAI,CAAC,KAAKxD,MAAV,EAAkB,OAAOqC,SAAP;IAClB,IAAIkB,KAAK,GAAG,KAAKvD,MAAL,CAAYuD,KAAZ,CAAkB,IAAlB,CAAZ;IACA,OAAO,KAAKvD,MAAL,CAAYkD,KAAZ,CAAkBK,KAAK,GAAG,CAA1B,CAAP;EACD;EAED;;;;;;;;;;;KAAA;;SAYAE,M,GAAA,SAAAA,OAAQC,GAAR,EAAa;IACX,KAAK1D,MAAL,CAAY2C,YAAZ,CAAyB,IAAzB,EAA+Be,GAA/B;IACA,OAAO,IAAP;EACD;EAED;;;;;;;;;;;KAAA;;SAYAC,K,GAAA,SAAAA,MAAOD,GAAP,EAAY;IACV,KAAK1D,MAAL,CAAY6C,WAAZ,CAAwB,IAAxB,EAA8Ba,GAA9B;IACA,OAAO,IAAP;EACD,C;SAEDE,M,GAAA,SAAAA,OAAA,EAAU;IACR,IAAIC,KAAK,GAAG,EAAZ;IAEA,KAAK,IAAI1C,IAAT,IAAiB,IAAjB,EAAuB;MACrB,IAAI,CAAC,KAAKf,cAAL,CAAoBe,IAApB,CAAL,EAAgC;MAChC,IAAIA,IAAI,KAAK,QAAb,EAAuB;MACvB,IAAId,KAAK,GAAG,KAAKc,IAAL,CAAZ;MAEA,IAAId,KAAK,YAAYE,KAArB,EAA4B;QAC1BsD,KAAK,CAAC1C,IAAD,CAAL,GAAcd,KAAK,CAACG,GAAN,CAAU,UAAAL,CAAC,EAAI;UAC3B,IAAI,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAC,CAACyD,MAA/B,EAAuC;YACrC,OAAOzD,CAAC,CAACyD,MAAF,EAAP;UACD,CAFD,MAEO;YACL,OAAOzD,CAAP;UACD;QACF,CANa,CAAd;MAOD,CARD,MAQO,IAAI,OAAOE,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACuD,MAAvC,EAA+C;QACpDC,KAAK,CAAC1C,IAAD,CAAL,GAAcd,KAAK,CAACuD,MAAN,EAAd;MACD,CAFM,MAEA;QACLC,KAAK,CAAC1C,IAAD,CAAL,GAAcd,KAAd;MACD;IACF;IAED,OAAOwD,KAAP;EACD;EAED;;;;;;;;;;;;;;;;;KAAA;;SAkBAC,G,GAAA,SAAAA,IAAKC,IAAL,EAAWC,WAAX,EAAwB;IACtB,IAAIC,GAAG,GAAG,IAAIrE,YAAA,CAAAiC,OAAJ,EAAV;IACA,OAAOoC,GAAG,CAACH,GAAJ,CAAQ,IAAR,EAAcC,IAAd,EAAoBC,WAApB,CAAP;EACD;EAED;;;;;;;KAAA;;SAQAE,I,GAAA,SAAAA,KAAA,EAAQ;IACN,IAAInC,MAAM,GAAG,IAAb;IACA,OAAOA,MAAM,CAAC/B,MAAd;MAAsB+B,MAAM,GAAGA,MAAM,CAAC/B,MAAhB;IAAtB;IACA,OAAO+B,MAAP;EACD;EAED;;;;;;;;;;;KAAA;;SAYAoC,S,GAAA,SAAAA,UAAWC,WAAX,EAAwB;IACtB,OAAO,KAAKxD,IAAL,CAAU6C,MAAjB;IACA,OAAO,KAAK7C,IAAL,CAAU+C,KAAjB;IACA,IAAI,CAACS,WAAL,EAAkB,OAAO,KAAKxD,IAAL,CAAUyD,OAAjB;EACnB,C;SAEDC,c,GAAA,SAAAA,eAAgBf,KAAhB,EAAuB;IACrB,IAAIgB,MAAM,GAAG,KAAKjC,QAAL,EAAb;IACA,IAAIV,MAAM,GAAG,KAAKL,MAAL,CAAYiD,KAAZ,CAAkB5C,MAA/B;IACA,IAAID,IAAI,GAAG,KAAKJ,MAAL,CAAYiD,KAAZ,CAAkB7C,IAA7B;IAEA,KAAK,IAAIxB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoD,KAApB,EAA2BpD,CAAC,EAA5B,EAAgC;MAC9B,IAAIoE,MAAM,CAACpE,CAAD,CAAN,KAAc,IAAlB,EAAwB;QACtByB,MAAM,GAAG,CAAT;QACAD,IAAI,IAAI,CAAR;MACD,CAHD,MAGO;QACLC,MAAM,IAAI,CAAV;MACD;IACF;IAED,OAAO;MAAED,IAAI,EAAJA,IAAF;MAAQC,MAAM,EAANA;IAAR,CAAP;EACD,C;SAEDH,U,GAAA,SAAAA,WAAYH,IAAZ,EAAkB;IAChB,IAAIE,GAAG,GAAG,KAAKD,MAAL,CAAYiD,KAAtB;IACA,IAAIlD,IAAI,CAACiC,KAAT,EAAgB;MACd/B,GAAG,GAAG,KAAK8C,cAAL,CAAoBhD,IAAI,CAACiC,KAAzB,CAAN;IACD,CAFD,MAEO,IAAIjC,IAAI,CAACmD,IAAT,EAAe;MACpB,IAAIlB,KAAK,GAAG,KAAKjB,QAAL,GAAgBoC,OAAhB,CAAwBpD,IAAI,CAACmD,IAA7B,CAAZ;MACA,IAAIlB,KAAK,KAAK,CAAC,CAAf,EAAkB/B,GAAG,GAAG,KAAK8C,cAAL,CAAoBf,KAApB,CAAN;IACnB;IACD,OAAO/B,GAAP;EACD;EAED;;;;;;;;;;EAUA;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAAA;;;;eAmCad,I;AAEf;;;;;;AAMA"},"metadata":{},"sourceType":"script","externalDependencies":[]}