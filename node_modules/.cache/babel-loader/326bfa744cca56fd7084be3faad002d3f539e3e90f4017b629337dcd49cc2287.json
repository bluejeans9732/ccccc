{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _container = _interopRequireDefault(require(\"./container\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\n/**\n * Represents a CSS file and contains all its parsed nodes.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('a{color:black} b{z-index:2}')\n * root.type         //=> 'root'\n * root.nodes.length //=> 2\n */\nvar Root = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Root, _Container);\n  function Root(defaults) {\n    var _this;\n    _this = _Container.call(this, defaults) || this;\n    _this.type = 'root';\n    if (!_this.nodes) _this.nodes = [];\n    return _this;\n  }\n  var _proto = Root.prototype;\n  _proto.removeChild = function removeChild(child, ignore) {\n    var index = this.index(child);\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before;\n    }\n    return _Container.prototype.removeChild.call(this, child);\n  };\n  _proto.normalize = function normalize(child, sample, type) {\n    var nodes = _Container.prototype.normalize.call(this, child);\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before;\n        } else {\n          delete sample.raws.before;\n        }\n      } else if (this.first !== sample) {\n        for (var _iterator = _createForOfIteratorHelperLoose(nodes), _step; !(_step = _iterator()).done;) {\n          var node = _step.value;\n          node.raws.before = sample.raws.before;\n        }\n      }\n    }\n    return nodes;\n  }\n  /**\n   * Returns a {@link Result} instance representing the root’s CSS.\n   *\n   * @param {processOptions} [opts] Options with only `to` and `map` keys.\n   *\n   * @return {Result} Result with current root’s CSS.\n   *\n   * @example\n   * const root1 = postcss.parse(css1, { from: 'a.css' })\n   * const root2 = postcss.parse(css2, { from: 'b.css' })\n   * root1.append(root2)\n   * const result = root1.toResult({ to: 'all.css', map: true })\n   */;\n\n  _proto.toResult = function toResult(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var LazyResult = require('./lazy-result');\n    var Processor = require('./processor');\n    var lazy = new LazyResult(new Processor(), this, opts);\n    return lazy.stringify();\n  }\n  /**\n   * @memberof Root#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `after`: the space symbols after the last child to the end of file.\n   * * `semicolon`: is the last child has an (optional) semicolon.\n   *\n   * @example\n   * postcss.parse('a {}\\n').raws //=> { after: '\\n' }\n   * postcss.parse('a {}').raws   //=> { after: '' }\n   */;\n\n  return Root;\n}(_container.default);\nvar _default = Root;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_container","_interopRequireDefault","require","Root","defaults","_this","_Container","call","type","nodes","removeChild","child","ignore","index","length","raws","before","prototype","normalize","sample","first","_iterator","_createForOfIteratorHelperLoose","_step","done","node","value","toResult","opts","LazyResult","Processor","lazy","stringify","default"],"sources":["C:\\Users\\dyd97\\OneDrive\\바탕 화면\\test-main\\node_modules\\postcss\\lib\\root.es6"],"sourcesContent":["import Container from './container'\n\n/**\n * Represents a CSS file and contains all its parsed nodes.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('a{color:black} b{z-index:2}')\n * root.type         //=> 'root'\n * root.nodes.length //=> 2\n */\nclass Root extends Container {\n  constructor (defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  removeChild (child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  normalize (child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  /**\n   * Returns a {@link Result} instance representing the root’s CSS.\n   *\n   * @param {processOptions} [opts] Options with only `to` and `map` keys.\n   *\n   * @return {Result} Result with current root’s CSS.\n   *\n   * @example\n   * const root1 = postcss.parse(css1, { from: 'a.css' })\n   * const root2 = postcss.parse(css2, { from: 'b.css' })\n   * root1.append(root2)\n   * const result = root1.toResult({ to: 'all.css', map: true })\n   */\n  toResult (opts = { }) {\n    let LazyResult = require('./lazy-result')\n    let Processor = require('./processor')\n\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n\n  /**\n   * @memberof Root#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `after`: the space symbols after the last child to the end of file.\n   * * `semicolon`: is the last child has an (optional) semicolon.\n   *\n   * @example\n   * postcss.parse('a {}\\n').raws //=> { after: '\\n' }\n   * postcss.parse('a {}').raws   //=> { after: '' }\n   */\n}\n\nexport default Root\n"],"mappings":";;;;AAAA,IAAAA,UAAA,GAAAC,sBAAA,CAAAC,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;IAUMC,I;;EACJ,SAAAA,KAAaC,QAAb,EAAuB;IAAA,IAAAC,KAAA;IACrBA,KAAA,GAAAC,UAAA,CAAAC,IAAA,OAAMH,QAAN;IACAC,KAAA,CAAKG,IAAL,GAAY,MAAZ;IACA,IAAI,CAACH,KAAA,CAAKI,KAAV,EAAiBJ,KAAA,CAAKI,KAAL,GAAa,EAAb;IAHI,OAAAJ,KAAA;EAItB;;SAEDK,W,GAAA,SAAAA,YAAaC,KAAb,EAAoBC,MAApB,EAA4B;IAC1B,IAAIC,KAAK,GAAG,KAAKA,KAAL,CAAWF,KAAX,CAAZ;IAEA,IAAI,CAACC,MAAD,IAAWC,KAAK,KAAK,CAArB,IAA0B,KAAKJ,KAAL,CAAWK,MAAX,GAAoB,CAAlD,EAAqD;MACnD,KAAKL,KAAL,CAAW,CAAX,EAAcM,IAAd,CAAmBC,MAAnB,GAA4B,KAAKP,KAAL,CAAWI,KAAX,EAAkBE,IAAlB,CAAuBC,MAAnD;IACD;IAED,OAAAV,UAAA,CAAAW,SAAA,CAAaP,WAAb,CAAAH,IAAA,OAAyBI,KAAzB;EACD,C;SAEDO,S,GAAA,SAAAA,UAAWP,KAAX,EAAkBQ,MAAlB,EAA0BX,IAA1B,EAAgC;IAC9B,IAAIC,KAAK,GAAAH,UAAA,CAAAW,SAAA,CAASC,SAAT,CAAAX,IAAA,OAAmBI,KAAnB,CAAT;IAEA,IAAIQ,MAAJ,EAAY;MACV,IAAIX,IAAI,KAAK,SAAb,EAAwB;QACtB,IAAI,KAAKC,KAAL,CAAWK,MAAX,GAAoB,CAAxB,EAA2B;UACzBK,MAAM,CAACJ,IAAP,CAAYC,MAAZ,GAAqB,KAAKP,KAAL,CAAW,CAAX,EAAcM,IAAd,CAAmBC,MAAxC;QACD,CAFD,MAEO;UACL,OAAOG,MAAM,CAACJ,IAAP,CAAYC,MAAnB;QACD;MACF,CAND,MAMO,IAAI,KAAKI,KAAL,KAAeD,MAAnB,EAA2B;QAChC,SAAAE,SAAA,GAAAC,+BAAA,CAAiBb,KAAjB,GAAAc,KAAA,IAAAA,KAAA,GAAAF,SAAA,IAAAG,IAAA,GAAwB;UAAA,IAAfC,IAAe,GAAAF,KAAA,CAAAG,KAAA;UACtBD,IAAI,CAACV,IAAL,CAAUC,MAAV,GAAmBG,MAAM,CAACJ,IAAP,CAAYC,MAA/B;QACD;MACF;IACF;IAED,OAAOP,KAAP;EACD;EAED;;;;;;;;;;;;KAAA;;SAaAkB,Q,GAAA,SAAAA,SAAUC,IAAV,EAAsB;IAAA,IAAZA,IAAY;MAAZA,IAAY,GAAL,EAAK;IAAA;IACpB,IAAIC,UAAU,GAAG3B,OAAO,CAAC,eAAD,CAAxB;IACA,IAAI4B,SAAS,GAAG5B,OAAO,CAAC,aAAD,CAAvB;IAEA,IAAI6B,IAAI,GAAG,IAAIF,UAAJ,CAAe,IAAIC,SAAJ,EAAf,EAAgC,IAAhC,EAAsCF,IAAtC,CAAX;IACA,OAAOG,IAAI,CAACC,SAAL,EAAP;EACD;EAED;;;;;;;;;;;;;;KAAA;;;EA1DiBhC,UAAA,CAAAiC,O;eA2EJ9B,I"},"metadata":{},"sourceType":"script","externalDependencies":[]}