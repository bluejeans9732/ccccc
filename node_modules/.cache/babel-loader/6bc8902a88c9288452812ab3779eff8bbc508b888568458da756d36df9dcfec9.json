{"ast":null,"code":"const Tokenizer = require('css-selector-tokenizer');\nconst {\n  parseAttrSelector,\n  attrStringify,\n  itMatchesOne\n} = require('./utils');\nfunction prefixNode(node, prefix) {\n  if (['class', 'id'].includes(node.type)) {\n    return {\n      ...node,\n      name: `${prefix}${node.name}`\n    };\n  }\n  if (['attribute'].includes(node.type) && node.content) {\n    const {\n      type,\n      operator,\n      head,\n      classes,\n      foot\n    } = parseAttrSelector(node);\n    if (!['class', 'id'].includes(type)) return node;\n    return {\n      ...node,\n      content: attrStringify({\n        type,\n        operator,\n        head,\n        classes: classes.map(cls => `${prefix}${cls}`),\n        foot\n      })\n    };\n  }\n  return node;\n}\nfunction iterateSelectorNodes(selector, options) {\n  const {\n    prefix,\n    ignore\n  } = options;\n  return {\n    ...selector,\n    nodes: selector.nodes.map(node => {\n      if (['selector', 'nested-pseudo-class'].includes(node.type)) {\n        return iterateSelectorNodes(node, options);\n      }\n      if (itMatchesOne(ignore, Tokenizer.stringify(node))) return node;\n      return prefixNode(node, prefix);\n    })\n  };\n}\n\n/**\n * @type {import('postcss').PluginCreator}\n */\nmodule.exports = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    prefix,\n    ignore\n  } = {\n    prefix: '',\n    ignore: [],\n    ...opts\n  };\n  if (typeof prefix !== 'string') {\n    throw new Error('@postcss-prefix: prefix option should be of type string.');\n  }\n  if (!Array.isArray(ignore)) {\n    throw new Error('@postcss-prefix: ignore options should be an Array.');\n  }\n  if (!prefix.length) return;\n  return {\n    postcssPlugin: 'postcss-prefixer',\n    Root(root, postcss) {\n      root.walkRules(rule => {\n        const parsed = Tokenizer.parse(rule.selector);\n        const selector = iterateSelectorNodes(parsed, {\n          prefix,\n          ignore\n        });\n        rule.selector = Tokenizer.stringify(selector);\n      });\n    }\n  };\n};\nmodule.exports.postcss = true;","map":{"version":3,"names":["Tokenizer","require","parseAttrSelector","attrStringify","itMatchesOne","prefixNode","node","prefix","includes","type","name","content","operator","head","classes","foot","map","cls","iterateSelectorNodes","selector","options","ignore","nodes","stringify","module","exports","opts","arguments","length","undefined","Error","Array","isArray","postcssPlugin","Root","root","postcss","walkRules","rule","parsed","parse"],"sources":["C:/Users/dyd97/OneDrive/바탕 화면/test-main/node_modules/daisyui/src/lib/postcss-prefixer/index.js"],"sourcesContent":["const Tokenizer = require('css-selector-tokenizer');\nconst {\n  parseAttrSelector,\n  attrStringify,\n  itMatchesOne,\n} = require('./utils');\n\nfunction prefixNode(node, prefix) {\n  if (['class', 'id'].includes(node.type)) {\n    return {\n      ...node,\n      name: `${prefix}${node.name}`,\n    };\n  }\n\n  if (['attribute'].includes(node.type) && node.content) {\n    const {\n      type, operator, head, classes, foot,\n    } = parseAttrSelector(node);\n\n    if (!['class', 'id'].includes(type)) return node;\n\n    return {\n      ...node,\n      content: attrStringify({\n        type,\n        operator,\n        head,\n        classes: classes.map((cls) => `${prefix}${cls}`),\n        foot,\n      }),\n    }\n  }\n\n  return node;\n}\n\nfunction iterateSelectorNodes(selector, options) {\n  const { prefix, ignore } = options;\n  return {\n    ...selector,\n    nodes: selector.nodes.map((node) => {\n      if (['selector', 'nested-pseudo-class'].includes(node.type)) {\n        return iterateSelectorNodes(node, options);\n      }\n\n      if (itMatchesOne(ignore, Tokenizer.stringify(node))) return node;\n\n      return prefixNode(node, prefix);\n    }),\n  };\n}\n\n/**\n * @type {import('postcss').PluginCreator}\n */\nmodule.exports = (opts = {}) => {\n  const { prefix, ignore } = {\n    prefix: '',\n    ignore: [],\n    ...opts,\n  };\n\n  if (typeof prefix !== 'string') {\n    throw new Error('@postcss-prefix: prefix option should be of type string.');\n  }\n\n  if (!Array.isArray(ignore)) {\n    throw new Error('@postcss-prefix: ignore options should be an Array.');\n  }\n\n  if (!prefix.length) return;\n\n  return {\n    postcssPlugin: 'postcss-prefixer',\n    Root(root, postcss) {\n      root.walkRules((rule) => {\n        const parsed = Tokenizer.parse(rule.selector);\n        const selector = iterateSelectorNodes(parsed, { prefix, ignore });\n\n        rule.selector = Tokenizer.stringify(selector);\n      });\n    },\n  };\n}\n\nmodule.exports.postcss = true\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}