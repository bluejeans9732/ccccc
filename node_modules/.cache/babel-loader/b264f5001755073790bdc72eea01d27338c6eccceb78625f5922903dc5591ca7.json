{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/**\n * Contains helpers for safely splitting lists of CSS values,\n * preserving parentheses and quotes.\n *\n * @example\n * const list = postcss.list\n *\n * @namespace list\n */\nvar list = {\n  split: function split(string, separators, last) {\n    var array = [];\n    var current = '';\n    var split = false;\n    var func = 0;\n    var quote = false;\n    var escape = false;\n    for (var i = 0; i < string.length; i++) {\n      var letter = string[i];\n      if (quote) {\n        if (escape) {\n          escape = false;\n        } else if (letter === '\\\\') {\n          escape = true;\n        } else if (letter === quote) {\n          quote = false;\n        }\n      } else if (letter === '\"' || letter === '\\'') {\n        quote = letter;\n      } else if (letter === '(') {\n        func += 1;\n      } else if (letter === ')') {\n        if (func > 0) func -= 1;\n      } else if (func === 0) {\n        if (separators.indexOf(letter) !== -1) split = true;\n      }\n      if (split) {\n        if (current !== '') array.push(current.trim());\n        current = '';\n        split = false;\n      } else {\n        current += letter;\n      }\n    }\n    if (last || current !== '') array.push(current.trim());\n    return array;\n  },\n  /**\n   * Safely splits space-separated values (such as those for `background`,\n   * `border-radius`, and other shorthand properties).\n   *\n   * @param {string} string Space-separated values.\n   *\n   * @return {string[]} Split values.\n   *\n   * @example\n   * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']\n   */\n  space: function space(string) {\n    var spaces = [' ', '\\n', '\\t'];\n    return list.split(string, spaces);\n  },\n  /**\n   * Safely splits comma-separated values (such as those for `transition-*`\n   * and `background` properties).\n   *\n   * @param {string} string Comma-separated values.\n   *\n   * @return {string[]} Split values.\n   *\n   * @example\n   * postcss.list.comma('black, linear-gradient(white, black)')\n   * //=> ['black', 'linear-gradient(white, black)']\n   */\n  comma: function comma(string) {\n    return list.split(string, [','], true);\n  }\n};\nvar _default = list;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["list","split","string","separators","last","array","current","func","quote","escape","i","length","letter","indexOf","push","trim","space","spaces","comma"],"sources":["C:\\Users\\dyd97\\OneDrive\\바탕 화면\\test-main\\node_modules\\postcss\\lib\\list.es6"],"sourcesContent":["/**\n * Contains helpers for safely splitting lists of CSS values,\n * preserving parentheses and quotes.\n *\n * @example\n * const list = postcss.list\n *\n * @namespace list\n */\nlet list = {\n\n  split (string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let quote = false\n    let escape = false\n\n    for (let i = 0; i < string.length; i++) {\n      let letter = string[i]\n\n      if (quote) {\n        if (escape) {\n          escape = false\n        } else if (letter === '\\\\') {\n          escape = true\n        } else if (letter === quote) {\n          quote = false\n        }\n      } else if (letter === '\"' || letter === '\\'') {\n        quote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.indexOf(letter) !== -1) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  },\n\n  /**\n   * Safely splits space-separated values (such as those for `background`,\n   * `border-radius`, and other shorthand properties).\n   *\n   * @param {string} string Space-separated values.\n   *\n   * @return {string[]} Split values.\n   *\n   * @example\n   * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']\n   */\n  space (string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  /**\n   * Safely splits comma-separated values (such as those for `transition-*`\n   * and `background` properties).\n   *\n   * @param {string} string Comma-separated values.\n   *\n   * @return {string[]} Split values.\n   *\n   * @example\n   * postcss.list.comma('black, linear-gradient(white, black)')\n   * //=> ['black', 'linear-gradient(white, black)']\n   */\n  comma (string) {\n    return list.split(string, [','], true)\n  }\n\n}\n\nexport default list\n"],"mappings":";;;;;AAAA;;;;;;;;;AASA,IAAIA,IAAI,GAAG;EAETC,KAFS,WAAAA,MAEFC,MAFE,EAEMC,UAFN,EAEkBC,IAFlB,EAEwB;IAC/B,IAAIC,KAAK,GAAG,EAAZ;IACA,IAAIC,OAAO,GAAG,EAAd;IACA,IAAIL,KAAK,GAAG,KAAZ;IAEA,IAAIM,IAAI,GAAG,CAAX;IACA,IAAIC,KAAK,GAAG,KAAZ;IACA,IAAIC,MAAM,GAAG,KAAb;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,MAAM,CAACS,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;MACtC,IAAIE,MAAM,GAAGV,MAAM,CAACQ,CAAD,CAAnB;MAEA,IAAIF,KAAJ,EAAW;QACT,IAAIC,MAAJ,EAAY;UACVA,MAAM,GAAG,KAAT;QACD,CAFD,MAEO,IAAIG,MAAM,KAAK,IAAf,EAAqB;UAC1BH,MAAM,GAAG,IAAT;QACD,CAFM,MAEA,IAAIG,MAAM,KAAKJ,KAAf,EAAsB;UAC3BA,KAAK,GAAG,KAAR;QACD;MACF,CARD,MAQO,IAAII,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,IAAjC,EAAuC;QAC5CJ,KAAK,GAAGI,MAAR;MACD,CAFM,MAEA,IAAIA,MAAM,KAAK,GAAf,EAAoB;QACzBL,IAAI,IAAI,CAAR;MACD,CAFM,MAEA,IAAIK,MAAM,KAAK,GAAf,EAAoB;QACzB,IAAIL,IAAI,GAAG,CAAX,EAAcA,IAAI,IAAI,CAAR;MACf,CAFM,MAEA,IAAIA,IAAI,KAAK,CAAb,EAAgB;QACrB,IAAIJ,UAAU,CAACU,OAAX,CAAmBD,MAAnB,MAA+B,CAAC,CAApC,EAAuCX,KAAK,GAAG,IAAR;MACxC;MAED,IAAIA,KAAJ,EAAW;QACT,IAAIK,OAAO,KAAK,EAAhB,EAAoBD,KAAK,CAACS,IAAN,CAAWR,OAAO,CAACS,IAAR,EAAX;QACpBT,OAAO,GAAG,EAAV;QACAL,KAAK,GAAG,KAAR;MACD,CAJD,MAIO;QACLK,OAAO,IAAIM,MAAX;MACD;IACF;IAED,IAAIR,IAAI,IAAIE,OAAO,KAAK,EAAxB,EAA4BD,KAAK,CAACS,IAAN,CAAWR,OAAO,CAACS,IAAR,EAAX;IAC5B,OAAOV,KAAP;EACD,CA3CQ;EA6CT;;;;;;;;;;;EAWAW,KAxDS,WAAAA,MAwDFd,MAxDE,EAwDM;IACb,IAAIe,MAAM,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,CAAb;IACA,OAAOjB,IAAI,CAACC,KAAL,CAAWC,MAAX,EAAmBe,MAAnB,CAAP;EACD,CA3DQ;EA6DT;;;;;;;;;;;;EAYAC,KAzES,WAAAA,MAyEFhB,MAzEE,EAyEM;IACb,OAAOF,IAAI,CAACC,KAAL,CAAWC,MAAX,EAAmB,CAAC,GAAD,CAAnB,EAA0B,IAA1B,CAAP;EACD;AA3EQ,CAAX;eA+EeF,I"},"metadata":{},"sourceType":"script","externalDependencies":[]}