{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = tokenizer;\nvar SINGLE_QUOTE = '\\''.charCodeAt(0);\nvar DOUBLE_QUOTE = '\"'.charCodeAt(0);\nvar BACKSLASH = '\\\\'.charCodeAt(0);\nvar SLASH = '/'.charCodeAt(0);\nvar NEWLINE = '\\n'.charCodeAt(0);\nvar SPACE = ' '.charCodeAt(0);\nvar FEED = '\\f'.charCodeAt(0);\nvar TAB = '\\t'.charCodeAt(0);\nvar CR = '\\r'.charCodeAt(0);\nvar OPEN_SQUARE = '['.charCodeAt(0);\nvar CLOSE_SQUARE = ']'.charCodeAt(0);\nvar OPEN_PARENTHESES = '('.charCodeAt(0);\nvar CLOSE_PARENTHESES = ')'.charCodeAt(0);\nvar OPEN_CURLY = '{'.charCodeAt(0);\nvar CLOSE_CURLY = '}'.charCodeAt(0);\nvar SEMICOLON = ';'.charCodeAt(0);\nvar ASTERISK = '*'.charCodeAt(0);\nvar COLON = ':'.charCodeAt(0);\nvar AT = '@'.charCodeAt(0);\nvar RE_AT_END = /[ \\n\\t\\r\\f{}()'\"\\\\;/[\\]#]/g;\nvar RE_WORD_END = /[ \\n\\t\\r\\f(){}:;@!'\"\\\\\\][#]|\\/(?=\\*)/g;\nvar RE_BAD_BRACKET = /.[\\\\/(\"'\\n]/;\nvar RE_HEX_ESCAPE = /[a-f0-9]/i;\nfunction tokenizer(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var css = input.css.valueOf();\n  var ignore = options.ignoreErrors;\n  var code, next, quote, lines, last, content, escape;\n  var nextLine, nextOffset, escaped, escapePos, prev, n, currentToken;\n  var length = css.length;\n  var offset = -1;\n  var line = 1;\n  var pos = 0;\n  var buffer = [];\n  var returned = [];\n  function position() {\n    return pos;\n  }\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, line, pos - offset);\n  }\n  function endOfFile() {\n    return returned.length === 0 && pos >= length;\n  }\n  function nextToken(opts) {\n    if (returned.length) return returned.pop();\n    if (pos >= length) return;\n    var ignoreUnclosed = opts ? opts.ignoreUnclosed : false;\n    code = css.charCodeAt(pos);\n    if (code === NEWLINE || code === FEED || code === CR && css.charCodeAt(pos + 1) !== NEWLINE) {\n      offset = pos;\n      line += 1;\n    }\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED:\n        next = pos;\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n          if (code === NEWLINE) {\n            offset = next;\n            line += 1;\n          }\n        } while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);\n        currentToken = ['space', css.slice(pos, next)];\n        pos = next - 1;\n        break;\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES:\n        var controlChar = String.fromCharCode(code);\n        currentToken = [controlChar, controlChar, line, pos - offset];\n        break;\n      case OPEN_PARENTHESES:\n        prev = buffer.length ? buffer.pop()[1] : '';\n        n = css.charCodeAt(pos + 1);\n        if (prev === 'url' && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE && n !== SPACE && n !== NEWLINE && n !== TAB && n !== FEED && n !== CR) {\n          next = pos;\n          do {\n            escaped = false;\n            next = css.indexOf(')', next + 1);\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos;\n                break;\n              } else {\n                unclosed('bracket');\n              }\n            }\n            escapePos = next;\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1;\n              escaped = !escaped;\n            }\n          } while (escaped);\n          currentToken = ['brackets', css.slice(pos, next + 1), line, pos - offset, line, next - offset];\n          pos = next;\n        } else {\n          next = css.indexOf(')', pos + 1);\n          content = css.slice(pos, next + 1);\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', line, pos - offset];\n          } else {\n            currentToken = ['brackets', content, line, pos - offset, line, next - offset];\n            pos = next;\n          }\n        }\n        break;\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE:\n        quote = code === SINGLE_QUOTE ? '\\'' : '\"';\n        next = pos;\n        do {\n          escaped = false;\n          next = css.indexOf(quote, next + 1);\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1;\n              break;\n            } else {\n              unclosed('string');\n            }\n          }\n          escapePos = next;\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1;\n            escaped = !escaped;\n          }\n        } while (escaped);\n        content = css.slice(pos, next + 1);\n        lines = content.split('\\n');\n        last = lines.length - 1;\n        if (last > 0) {\n          nextLine = line + last;\n          nextOffset = next - lines[last].length;\n        } else {\n          nextLine = line;\n          nextOffset = offset;\n        }\n        currentToken = ['string', css.slice(pos, next + 1), line, pos - offset, nextLine, next - nextOffset];\n        offset = nextOffset;\n        line = nextLine;\n        pos = next;\n        break;\n      case AT:\n        RE_AT_END.lastIndex = pos + 1;\n        RE_AT_END.test(css);\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1;\n        } else {\n          next = RE_AT_END.lastIndex - 2;\n        }\n        currentToken = ['at-word', css.slice(pos, next + 1), line, pos - offset, line, next - offset];\n        pos = next;\n        break;\n      case BACKSLASH:\n        next = pos;\n        escape = true;\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1;\n          escape = !escape;\n        }\n        code = css.charCodeAt(next + 1);\n        if (escape && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {\n          next += 1;\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1;\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1;\n            }\n          }\n        }\n        currentToken = ['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset];\n        pos = next;\n        break;\n      default:\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1;\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length;\n            } else {\n              unclosed('comment');\n            }\n          }\n          content = css.slice(pos, next + 1);\n          lines = content.split('\\n');\n          last = lines.length - 1;\n          if (last > 0) {\n            nextLine = line + last;\n            nextOffset = next - lines[last].length;\n          } else {\n            nextLine = line;\n            nextOffset = offset;\n          }\n          currentToken = ['comment', content, line, pos - offset, nextLine, next - nextOffset];\n          offset = nextOffset;\n          line = nextLine;\n          pos = next;\n        } else {\n          RE_WORD_END.lastIndex = pos + 1;\n          RE_WORD_END.test(css);\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1;\n          } else {\n            next = RE_WORD_END.lastIndex - 2;\n          }\n          currentToken = ['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset];\n          buffer.push(currentToken);\n          pos = next;\n        }\n        break;\n    }\n    pos++;\n    return currentToken;\n  }\n  function back(token) {\n    returned.push(token);\n  }\n  return {\n    back: back,\n    nextToken: nextToken,\n    endOfFile: endOfFile,\n    position: position\n  };\n}\nmodule.exports = exports.default;","map":{"version":3,"names":["SINGLE_QUOTE","charCodeAt","DOUBLE_QUOTE","BACKSLASH","SLASH","NEWLINE","SPACE","FEED","TAB","CR","OPEN_SQUARE","CLOSE_SQUARE","OPEN_PARENTHESES","CLOSE_PARENTHESES","OPEN_CURLY","CLOSE_CURLY","SEMICOLON","ASTERISK","COLON","AT","RE_AT_END","RE_WORD_END","RE_BAD_BRACKET","RE_HEX_ESCAPE","tokenizer","input","options","css","valueOf","ignore","ignoreErrors","code","next","quote","lines","last","content","escape","nextLine","nextOffset","escaped","escapePos","prev","n","currentToken","length","offset","line","pos","buffer","returned","position","unclosed","what","error","endOfFile","nextToken","opts","pop","ignoreUnclosed","slice","controlChar","String","fromCharCode","indexOf","test","split","lastIndex","charAt","push","back","token"],"sources":["C:\\Users\\dyd97\\OneDrive\\바탕 화면\\test-main\\node_modules\\postcss\\lib\\tokenize.es6"],"sourcesContent":["const SINGLE_QUOTE = '\\''.charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[ \\n\\t\\r\\f{}()'\"\\\\;/[\\]#]/g\nconst RE_WORD_END = /[ \\n\\t\\r\\f(){}:;@!'\"\\\\\\][#]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\\\/(\"'\\n]/\nconst RE_HEX_ESCAPE = /[a-f0-9]/i\n\nexport default function tokenizer (input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, next, quote, lines, last, content, escape\n  let nextLine, nextOffset, escaped, escapePos, prev, n, currentToken\n\n  let length = css.length\n  let offset = -1\n  let line = 1\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position () {\n    return pos\n  }\n\n  function unclosed (what) {\n    throw input.error('Unclosed ' + what, line, pos - offset)\n  }\n\n  function endOfFile () {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken (opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n    if (\n      code === NEWLINE || code === FEED ||\n      (code === CR && css.charCodeAt(pos + 1) !== NEWLINE)\n    ) {\n      offset = pos\n      line += 1\n    }\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED:\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n          if (code === NEWLINE) {\n            offset = next\n            line += 1\n          }\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES:\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, line, pos - offset]\n        break\n\n      case OPEN_PARENTHESES:\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE &&\n          n !== SPACE && n !== NEWLINE && n !== TAB &&\n          n !== FEED && n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1),\n            line, pos - offset,\n            line, next - offset\n          ]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', line, pos - offset]\n          } else {\n            currentToken = ['brackets', content,\n              line, pos - offset,\n              line, next - offset\n            ]\n            pos = next\n          }\n        }\n\n        break\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE:\n        quote = code === SINGLE_QUOTE ? '\\'' : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        content = css.slice(pos, next + 1)\n        lines = content.split('\\n')\n        last = lines.length - 1\n\n        if (last > 0) {\n          nextLine = line + last\n          nextOffset = next - lines[last].length\n        } else {\n          nextLine = line\n          nextOffset = offset\n        }\n\n        currentToken = ['string', css.slice(pos, next + 1),\n          line, pos - offset,\n          nextLine, next - nextOffset\n        ]\n\n        offset = nextOffset\n        line = nextLine\n        pos = next\n        break\n\n      case AT:\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1),\n          line, pos - offset,\n          line, next - offset\n        ]\n\n        pos = next\n        break\n\n      case BACKSLASH:\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1),\n          line, pos - offset,\n          line, next - offset\n        ]\n\n        pos = next\n        break\n\n      default:\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          content = css.slice(pos, next + 1)\n          lines = content.split('\\n')\n          last = lines.length - 1\n\n          if (last > 0) {\n            nextLine = line + last\n            nextOffset = next - lines[last].length\n          } else {\n            nextLine = line\n            nextOffset = offset\n          }\n\n          currentToken = ['comment', content,\n            line, pos - offset,\n            nextLine, next - nextOffset\n          ]\n\n          offset = nextOffset\n          line = nextLine\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1),\n            line, pos - offset,\n            line, next - offset\n          ]\n\n          buffer.push(currentToken)\n\n          pos = next\n        }\n\n        break\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back (token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    nextToken,\n    endOfFile,\n    position\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}