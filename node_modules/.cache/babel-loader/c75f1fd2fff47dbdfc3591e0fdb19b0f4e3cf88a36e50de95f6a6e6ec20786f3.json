{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _node = _interopRequireDefault(require(\"./node\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\n/**\n * Represents a comment between declarations or statements (rule and at-rules).\n *\n * Comments inside selectors, at-rule parameters, or declaration values\n * will be stored in the `raws` properties explained above.\n *\n * @extends Node\n */\nvar Comment = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Comment, _Node);\n  function Comment(defaults) {\n    var _this;\n    _this = _Node.call(this, defaults) || this;\n    _this.type = 'comment';\n    return _this;\n  }\n  /**\n   * @memberof Comment#\n   * @member {string} text The comment’s text.\n   */\n\n  /**\n   * @memberof Comment#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node.\n   * * `left`: the space symbols between `/*` and the comment’s text.\n   * * `right`: the space symbols between the comment’s text.\n   */\n\n  return Comment;\n}(_node.default);\nvar _default = Comment;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_node","_interopRequireDefault","require","Comment","defaults","_this","_Node","call","type","default"],"sources":["C:\\Users\\dyd97\\OneDrive\\바탕 화면\\test-main\\node_modules\\postcss\\lib\\comment.es6"],"sourcesContent":["import Node from './node'\n\n/**\n * Represents a comment between declarations or statements (rule and at-rules).\n *\n * Comments inside selectors, at-rule parameters, or declaration values\n * will be stored in the `raws` properties explained above.\n *\n * @extends Node\n */\nclass Comment extends Node {\n  constructor (defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n\n  /**\n   * @memberof Comment#\n   * @member {string} text The comment’s text.\n   */\n\n  /**\n   * @memberof Comment#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node.\n   * * `left`: the space symbols between `/*` and the comment’s text.\n   * * `right`: the space symbols between the comment’s text.\n   */\n}\n\nexport default Comment\n"],"mappings":";;;;AAAA,IAAAA,KAAA,GAAAC,sBAAA,CAAAC,OAAA;;;;;;;;;;;;AAEA;;;;;;;;IAQMC,O;;EACJ,SAAAA,QAAaC,QAAb,EAAuB;IAAA,IAAAC,KAAA;IACrBA,KAAA,GAAAC,KAAA,CAAAC,IAAA,OAAMH,QAAN;IACAC,KAAA,CAAKG,IAAL,GAAY,SAAZ;IAFqB,OAAAH,KAAA;EAGtB;EAED;;;;;EAKA;;;;;;;;;;;;;;EAXoBL,KAAA,CAAAS,O;eAyBPN,O"},"metadata":{},"sourceType":"script","externalDependencies":[]}